<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>self-hosted Zapier Alternative on Bas-Man's Musings</title><link>https://bas-man.github.io/series/self-hosted-zapier-alternative/</link><description>Recent content in self-hosted Zapier Alternative on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Tue, 12 Jan 2021 16:00:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/series/self-hosted-zapier-alternative/index.xml" rel="self" type="application/rss+xml"/><item><title>Generic Regex Match Function Multiple Groups</title><link>https://bas-man.github.io/post/generic-regex-match-function-multiple-groups/</link><pubDate>Tue, 12 Jan 2021 16:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/generic-regex-match-function-multiple-groups/</guid><description>
&lt;p>If you have read my previous posts; you might know I am currently working on a new project to move some services to a self-hosted solution. As part of this, I have been working on dealing with &lt;code>unicode&lt;/code> characters in regex.&lt;/p>
&lt;p>In relation to this I have found that I am writing the same function repeatedly. The only difference being the number matches being returned. So I decided we need to refactor this.&lt;/p>
&lt;p>Here is my solution&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python3" data-lang="python3">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">findMatches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">regex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="s2"> This is a generic matching function.
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="s2"> Warning! Your regex expression MUST use &amp;#39;Named Groups&amp;#39; -&amp;gt; (:P&amp;lt;name&amp;gt;) or
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="s2"> this function will return an empty dictionary
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="s2"> :param string: The text you are searching
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="s2"> :type string: str
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="s2"> :param regex: The regular expression string you are using to search
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="s2"> :type regex: str
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="s2"> :returns: A dictionary of named key/value pairs. The key value is derived &lt;/span>&lt;span class="se">\
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="s2"> from (:P&amp;lt;name&amp;gt;)
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> :returns: None is returned if No match is found.
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="s2"> :rtype: dict
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="s2"> :rtype: None
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">matcher&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">regex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">UNICODE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">match&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">matcher&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">matches&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">groupdict&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">matches&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">matches&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1"># No Matches&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It takes two arguments. The &lt;code>string&lt;/code> to be searched and the &lt;code>regex&lt;/code> to be used. I go through the basic process of making the &lt;code>re&lt;/code> object and do the match.
I then go over match objects dictionary and get the name of the keys. I use these keys to make a simple dictionary object storing the matching key, value pairs.&lt;/p>
&lt;p>No more writing the same basic function repeatedly.&lt;/p></description></item><item><title>Project: Self Hosted Zapier Alternative</title><link>https://bas-man.github.io/post/self-hosted-zapier-alternative/</link><pubDate>Sat, 02 Jan 2021 23:00:39 +0900</pubDate><guid>https://bas-man.github.io/post/self-hosted-zapier-alternative/</guid><description>
&lt;p>I am currently in the process of working out how I might replace some of my Zapier services. Why would I want to do this?&lt;/p>
&lt;ol>
&lt;li>I use the free tier. (The process only runs once every 15 minutes. It used to be once every 5 mins.) Which means it has become a bit slow in sending the notifications.&lt;/li>
&lt;li>I want to learn how to use &lt;a href="https://www.docker.com">Docker&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Once I get a bit further along I will hopefully publish the python code to &lt;a href="https://github.com">GitHub&lt;/a> and document some of the issues and successes as I move along. Check the &lt;a href="https://bas-man.github.io/projects/">Projects page&lt;/a> section if you are interested.&lt;/p></description></item></channel></rss>