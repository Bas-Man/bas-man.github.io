<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning Rust on Bas-Man's Musings</title><link>https://bas-man.github.io/series/learning-rust/</link><description>Recent content in Learning Rust on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 15 Jun 2021 17:00:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/series/learning-rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Published My First Crate: decon-spf</title><link>https://bas-man.github.io/post/rust/published-my-first-crate/</link><pubDate>Tue, 15 Jun 2021 17:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/published-my-first-crate/</guid><description>&lt;p>Today I published my first &lt;strong>rust&lt;/strong> crate.&lt;/p></description></item><item><title>Rust: Add an Example Program to your Library Crate</title><link>https://bas-man.github.io/post/rust/library-with-example-program/</link><pubDate>Sun, 13 Jun 2021 16:45:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/library-with-example-program/</guid><description>&lt;p>Recently I decided that I might actually publish my little rust crate. To that end I started looking into some of the things that are needed and what can be done. I have published a &lt;strong>perl&lt;/strong> module in the past. And as a rule for myself, I like to provide an example program that uses a &lt;em>module&lt;/em> or &lt;em>library&lt;/em>. That is what I will look at today.&lt;/p></description></item><item><title>Rust: Lazy Static Regex</title><link>https://bas-man.github.io/post/rust/lazy-static-regex/</link><pubDate>Fri, 11 Jun 2021 14:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/lazy-static-regex/</guid><description>&lt;p>Hi,&lt;/p>
&lt;p>Today I will finally go over how I used the &lt;a href="">lazy_static&lt;/a> crate to help the compiler keep regex optimised.&lt;/p></description></item><item><title>Rust: Domain Name Validation</title><link>https://bas-man.github.io/post/rust/domain-name-validation/</link><pubDate>Tue, 18 May 2021 16:50:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/domain-name-validation/</guid><description>&lt;p>Recently, as I work my way through learning bits of &lt;strong>rust&lt;/strong>, I have been thinking that I should in corporate some form of &lt;strong>input validation&lt;/strong> for &lt;strong>domains&lt;/strong>.&lt;/p>
&lt;p>Today I will look at two &lt;strong>crates&lt;/strong>.&lt;/p></description></item><item><title>Rust: Move from binary to library and Add Documentation Examples that are tested.</title><link>https://bas-man.github.io/post/rust/rust-move-to-crate-add-testable-documentation/</link><pubDate>Tue, 11 May 2021 13:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-move-to-crate-add-testable-documentation/</guid><description>&lt;p>In the previous article in this &lt;a href="https://bas-man.github.io/series/learning-rust/">series&lt;/a> I went through some basics of documenting your rust code. I had hoped to be able to take advantage of another nice feature of rust. That being the fact that code examples are actually tested by rust. I will go through the changes I had to make for this to work.&lt;/p></description></item><item><title>Rust: Documenting your Code</title><link>https://bas-man.github.io/post/rust/rust-documenting/</link><pubDate>Thu, 06 May 2021 11:03:18 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-documenting/</guid><description>&lt;p>Hi.&lt;br>
As with all projects. It&amp;rsquo;s important to create documentation. This is, as we know, very important when creating code. When we come back to a project after a break, or if someone new takes over. Documentation will help you remember or learn what the code does. The thinking that was behind certain decisions.&lt;/p></description></item><item><title>SPF: Adding Support for A and MX Mechanisms in Rust</title><link>https://bas-man.github.io/post/rust/rust-spf-a-mx/</link><pubDate>Tue, 27 Apr 2021 16:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-spf-a-mx/</guid><description>&lt;p>This is a quick followup on my progress in deconstructing SPF using Rust.&lt;br>
Today I was able to implement both &lt;code>A&lt;/code> and &lt;code>MX&lt;/code> mechanisms.&lt;/p></description></item><item><title>Looking at Regex in Rust (Addendum)</title><link>https://bas-man.github.io/post/rust/rust-looking-at-regex-addendum/</link><pubDate>Thu, 22 Apr 2021 14:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-looking-at-regex-addendum/</guid><description>Hi. In my previous article Looking at Regex in Rust. I covered some basics. Today I will go over some new things that I have learned, as I expanded on things that my regex expression needs to handle. In particular the need to handle the possible existence or none existence of qualifiers +,-,~,?.
TL;DR: If you don&amp;rsquo;t want to read the full article. I will place the highlights here.
A regex pattern such as (x?</description></item><item><title>Looking at Regex in Rust</title><link>https://bas-man.github.io/post/rust/rust-looking-at-regex/</link><pubDate>Tue, 20 Apr 2021 21:58:40 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-looking-at-regex/</guid><description>If you have been following this series, you might know that I am playing with SPF records. I have turned my eye to a and mx mechanisms. As I started looking at the a mechanism. I noticed that my current approach using the standard string functions would probably be fairly difficult to implement. So I started to think about using the Regex crate. So this will be a look at how that went.</description></item><item><title>Rust Basic Testing</title><link>https://bas-man.github.io/post/rust/rust-basic-testing/</link><pubDate>Mon, 19 Apr 2021 15:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-basic-testing/</guid><description>As I work through learning rust, I figured it was time to to start doing actual testing.
Why Test Simple, it&amp;rsquo;s really essential when building anything beyond a few lines of simple code. Being able to run a series of reproducible tests as you develop; allows you to ensure that changes you make are not breaking exisiting code. You also have the option to develop using TDD.
Of course I have not adhered to any of this as I explore the basics of working with rust.</description></item><item><title>Manage Rust Code by Breaking it Up</title><link>https://bas-man.github.io/post/rust/manage-rust-code-by-breaking-it-up/</link><pubDate>Wed, 14 Apr 2021 15:25:30 +0900</pubDate><guid>https://bas-man.github.io/post/rust/manage-rust-code-by-breaking-it-up/</guid><description>We often start small coding projects, and we often tend to start them off in a single file. But sometimes, the project naturally grows larger and more complex. The code thus becomes more difficult to manage in a single file.
At these times we often need to break the code up across multiple files so that we can focus on a particular functionality. This is where I found myself as I am toying with my SPF code.</description></item><item><title>Deconstructing SPF with Rust using Generics</title><link>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust-using-generics/</link><pubDate>Sat, 10 Apr 2021 23:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust-using-generics/</guid><description>As I mentioned in my previous article Deconstructing SPF Records with Rust. There is a case for using generics given the amount of overlap between the different mechanisms.
So in this article I will document how I transitioned from using unique structs for each mechanism, leading to less overall code and other benefits.
While I was considering how best to go about doing generics, I came across this very nice write up on dev.</description></item><item><title>Deconstructing SPF Records with Rust</title><link>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust/</link><pubDate>Thu, 08 Apr 2021 10:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust/</guid><description>Hi. If you have visited my blog before you might have seen my series on using the trust-dns-resolver crate. As part of that series I looked at querying DNS TXT records. During the process I was reminded of SPF records. Something I used to deal with in a previous position. And this got me to thinking about using SPF records as a way to learn more about working with rust.</description></item></channel></rss>