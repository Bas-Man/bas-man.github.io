<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python | Snippets on Bas-Man's Musings</title><link>https://bas-man.github.io/cheatsheets/python/snippets/</link><description>Recent content in Python | Snippets on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 12 Jan 2021 16:00:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/cheatsheets/python/snippets/index.xml" rel="self" type="application/rss+xml"/><item><title>Return a dictionary of Regex Matches</title><link>https://bas-man.github.io/cheatsheets/python/snippets/multiple-group-regex/</link><pubDate>Tue, 12 Jan 2021 16:00:00 +0900</pubDate><guid>https://bas-man.github.io/cheatsheets/python/snippets/multiple-group-regex/</guid><description>An example of how to make your function more flexible to handle a different number of return values. This means you won&amp;rsquo;t have to write the same code repeatedly if you are only changing the number of groups that are being returned.
def findMatches(string, regex) -&amp;gt; dict: &amp;#34;&amp;#34;&amp;#34; This is a generic matching function. Warning! Your regex expression MUST use &amp;#39;Named Groups&amp;#39; -&amp;gt; (:P&amp;lt;name&amp;gt;) or this function will return an empty dictionary :param string: The text you are searching :type string: str :param regex: The regular expression string you are using to search :type regex: str :returns: A dictionary of named key/value pairs.</description></item><item><title>Decoding Email Header and Contents</title><link>https://bas-man.github.io/cheatsheets/python/snippets/email-header-subject/</link><pubDate>Thu, 15 Oct 2020 09:59:45 +0900</pubDate><guid>https://bas-man.github.io/cheatsheets/python/snippets/email-header-subject/</guid><description>Using email.parser and email.policy along with policy.default means that you do not need to worry about character encoding as the modules will take care of it automatically.
I forget where I saw it but I believe that policy.default will become the real default in the future.
Current policy.compat32 is the module default.</description></item><item><title>Different String Padding Approaches</title><link>https://bas-man.github.io/cheatsheets/python/snippets/padding-numbers/</link><pubDate>Tue, 07 Jul 2020 23:55:00 +0900</pubDate><guid>https://bas-man.github.io/cheatsheets/python/snippets/padding-numbers/</guid><description>How to pad numbers in Python.</description></item><item><title>Generate QR Codes</title><link>https://bas-man.github.io/cheatsheets/python/snippets/qr-code/</link><pubDate>Tue, 07 Jul 2020 23:55:00 +0900</pubDate><guid>https://bas-man.github.io/cheatsheets/python/snippets/qr-code/</guid><description>Generate QR codes</description></item><item><title>Mock Python version for Testing</title><link>https://bas-man.github.io/cheatsheets/python/snippets/mock-python-version/</link><pubDate>Tue, 07 Jul 2020 23:55:00 +0900</pubDate><guid>https://bas-man.github.io/cheatsheets/python/snippets/mock-python-version/</guid><description>How to mock Python version</description></item></channel></rss>