<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on Bas-Man's Musings</title><link>https://bas-man.github.io/categories/coding/</link><description>Recent content in coding on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 13 Jun 2021 16:45:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust: Add an Example Program to your Library Crate</title><link>https://bas-man.github.io/post/rust/library-with-example-program/</link><pubDate>Sun, 13 Jun 2021 16:45:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/library-with-example-program/</guid><description>&lt;p>Recently I decided that I might actually publish my little rust crate. To that end I started looking into some of the things that are needed and what can be done. I have published a &lt;strong>perl&lt;/strong> module in the past. And as a rule for myself, I like to provide an example program that uses a &lt;em>module&lt;/em> or &lt;em>library&lt;/em>. That is what I will look at today.&lt;/p></description></item><item><title>Rust: Lazy Static Regex</title><link>https://bas-man.github.io/post/rust/lazy-static-regex/</link><pubDate>Fri, 11 Jun 2021 14:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/lazy-static-regex/</guid><description>&lt;p>Hi,&lt;/p>
&lt;p>Today I will finally go over how I used the &lt;a href="">lazy_static&lt;/a> crate to help the compiler keep regex optimised.&lt;/p></description></item><item><title>Swift: Deconstruct SPF</title><link>https://bas-man.github.io/post/swift/swift-spf-documenting-package/</link><pubDate>Wed, 02 Jun 2021 18:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-documenting-package/</guid><description>&lt;p>Hi,&lt;/p>
&lt;p>I have been working on this project on and off for a bit now. So I thought it was time to go over how we might be able to not only internally document our code, but also to document it at the package level.&lt;/p></description></item><item><title>Swift: Deconstruct SPF: asMechanism with Qualifier</title><link>https://bas-man.github.io/post/swift/swift-spf-asmechanism-using-qualifier/</link><pubDate>Thu, 27 May 2021 12:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-asmechanism-using-qualifier/</guid><description>&lt;p>Hi,&lt;/p>
&lt;p>In this article, I will walk through how I re-implemented the &lt;code>enum&lt;/code> for &lt;code>Qualifier&lt;/code> and &lt;code>MechanismKind&lt;/code>. I will also deliver a working &lt;code>asMechanism()&lt;/code> function. The diff is &lt;a href="https://github.com/Bas-Man/swift-decon-spf/compare/Initial-asMechanism...QualifierSuppportAsMechanism">here&lt;/a>&lt;/p></description></item><item><title>Swift: Deconstruct SPF - Qualifier and MechanismKind</title><link>https://bas-man.github.io/post/swift/swift-spf-qualifier-mechanismkind/</link><pubDate>Thu, 27 May 2021 08:50:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-qualifier-mechanismkind/</guid><description>&lt;p>In this article I will be looking at defining the &lt;strong>enums&lt;/strong> for &lt;code>Qualifier&lt;/code> and &lt;code>MechanismKind&lt;/code>. I will also be adding tests to ensure that the functions work as expected. Further I will implement a simple &lt;code>asMechanism()&lt;/code> as a proof of concept.&lt;/p></description></item><item><title>Swift: Deconstruct SPF: Strings and SubStrings</title><link>https://bas-man.github.io/post/swift/swift-spf-generic-string-function/</link><pubDate>Sat, 22 May 2021 00:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-generic-string-function/</guid><description>&lt;p>I have been working on my SPF project in &lt;strong>Swift&lt;/strong> of late. As part of this I have started to deal with &lt;strong>substrings&lt;/strong>. &amp;ldquo;&lt;em>A slice of a string&lt;/em>&amp;rdquo; according to &lt;a href="https://developer.apple.com/documentation/swift/substring">Apple Documentation&lt;/a>. In dealing with this, I have found myself quite often converting substrings back to normal strings. Today we will look at how we can pass &lt;strong>substrings&lt;/strong> directly by making our functions &lt;strong>generic&lt;/strong>.&lt;/p></description></item><item><title>Swift: Deconstruct SPF - Struct Mechanism</title><link>https://bas-man.github.io/post/swift/swift-spf-struct-mechanims/</link><pubDate>Wed, 19 May 2021 18:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-struct-mechanims/</guid><description>&lt;p>Today, I will start on building out the functionality of the &lt;code>struct Mechanism&lt;/code>.&lt;br>
This will involve creating some tests, and basic functions.&lt;/p></description></item><item><title>Rust: Domain Name Validation</title><link>https://bas-man.github.io/post/rust/domain-name-validation/</link><pubDate>Tue, 18 May 2021 16:50:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/domain-name-validation/</guid><description>&lt;p>Recently, as I work my way through learning bits of &lt;strong>rust&lt;/strong>, I have been thinking that I should in corporate some form of &lt;strong>input validation&lt;/strong> for &lt;strong>domains&lt;/strong>.&lt;/p>
&lt;p>Today I will look at two &lt;strong>crates&lt;/strong>.&lt;/p></description></item><item><title>Swift: Deconstruct SPF an Outline and Background</title><link>https://bas-man.github.io/post/swift/decon-spf-outline-background/</link><pubDate>Mon, 17 May 2021 12:15:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/decon-spf-outline-background/</guid><description>&lt;h1 id="what-is-spf">What is SPF&lt;/h1>
&lt;p>If you have not followed my rust series on deconstructing SPF you can check it out &lt;a href="https://bas-man.github.io/series/learning-rust/">here&lt;/a>.&lt;/p></description></item><item><title>Swift: Deconstruct SPF Getting Started</title><link>https://bas-man.github.io/post/swift/decon-spf-getting-started/</link><pubDate>Thu, 13 May 2021 20:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/decon-spf-getting-started/</guid><description>&lt;p>In my previous series &amp;ldquo;&lt;a href="https://bas-man.github.io/series/learning-rust/">Learning Rust&lt;/a>&amp;rdquo;. I decided to attempt to learn some fairly basic rust concepts and constructs by working on a fairly simple project. This seemed to go fairly well. So I am now going to attempt to work on the same project, but this time, using &lt;a href="https://swift.org">Swift&lt;/a>.&lt;/p></description></item><item><title>Rust: Move from binary to library and Add Documentation Examples that are tested.</title><link>https://bas-man.github.io/post/rust/rust-move-to-crate-add-testable-documentation/</link><pubDate>Tue, 11 May 2021 13:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-move-to-crate-add-testable-documentation/</guid><description>&lt;p>In the previous article in this &lt;a href="https://bas-man.github.io/series/learning-rust/">series&lt;/a> I went through some basics of documenting your rust code. I had hoped to be able to take advantage of another nice feature of rust. That being the fact that code examples are actually tested by rust. I will go through the changes I had to make for this to work.&lt;/p></description></item><item><title>Rust: Documenting your Code</title><link>https://bas-man.github.io/post/rust/rust-documenting/</link><pubDate>Thu, 06 May 2021 11:03:18 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-documenting/</guid><description>&lt;p>Hi.&lt;br>
As with all projects. It&amp;rsquo;s important to create documentation. This is, as we know, very important when creating code. When we come back to a project after a break, or if someone new takes over. Documentation will help you remember or learn what the code does. The thinking that was behind certain decisions.&lt;/p></description></item><item><title>SPF: Adding Support for A and MX Mechanisms in Rust</title><link>https://bas-man.github.io/post/rust/rust-spf-a-mx/</link><pubDate>Tue, 27 Apr 2021 16:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-spf-a-mx/</guid><description>&lt;p>This is a quick followup on my progress in deconstructing SPF using Rust.&lt;br>
Today I was able to implement both &lt;code>A&lt;/code> and &lt;code>MX&lt;/code> mechanisms.&lt;/p></description></item><item><title>Looking at Regex in Rust (Addendum)</title><link>https://bas-man.github.io/post/rust/rust-looking-at-regex-addendum/</link><pubDate>Thu, 22 Apr 2021 14:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-looking-at-regex-addendum/</guid><description>Hi. In my previous article Looking at Regex in Rust. I covered some basics. Today I will go over some new things that I have learned, as I expanded on things that my regex expression needs to handle. In particular the need to handle the possible existence or none existence of qualifiers +,-,~,?.
TL;DR: If you don&amp;rsquo;t want to read the full article. I will place the highlights here.
A regex pattern such as (x?</description></item><item><title>Looking at Regex in Rust</title><link>https://bas-man.github.io/post/rust/rust-looking-at-regex/</link><pubDate>Tue, 20 Apr 2021 21:58:40 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-looking-at-regex/</guid><description>If you have been following this series, you might know that I am playing with SPF records. I have turned my eye to a and mx mechanisms. As I started looking at the a mechanism. I noticed that my current approach using the standard string functions would probably be fairly difficult to implement. So I started to think about using the Regex crate. So this will be a look at how that went.</description></item><item><title>Rust Basic Testing</title><link>https://bas-man.github.io/post/rust/rust-basic-testing/</link><pubDate>Mon, 19 Apr 2021 15:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-basic-testing/</guid><description>As I work through learning rust, I figured it was time to to start doing actual testing.
Why Test Simple, it&amp;rsquo;s really essential when building anything beyond a few lines of simple code. Being able to run a series of reproducible tests as you develop; allows you to ensure that changes you make are not breaking exisiting code. You also have the option to develop using TDD.
Of course I have not adhered to any of this as I explore the basics of working with rust.</description></item><item><title>Manage Rust Code by Breaking it Up</title><link>https://bas-man.github.io/post/rust/manage-rust-code-by-breaking-it-up/</link><pubDate>Wed, 14 Apr 2021 15:25:30 +0900</pubDate><guid>https://bas-man.github.io/post/rust/manage-rust-code-by-breaking-it-up/</guid><description>We often start small coding projects, and we often tend to start them off in a single file. But sometimes, the project naturally grows larger and more complex. The code thus becomes more difficult to manage in a single file.
At these times we often need to break the code up across multiple files so that we can focus on a particular functionality. This is where I found myself as I am toying with my SPF code.</description></item><item><title>Deconstructing SPF with Rust using Generics</title><link>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust-using-generics/</link><pubDate>Sat, 10 Apr 2021 23:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust-using-generics/</guid><description>As I mentioned in my previous article Deconstructing SPF Records with Rust. There is a case for using generics given the amount of overlap between the different mechanisms.
So in this article I will document how I transitioned from using unique structs for each mechanism, leading to less overall code and other benefits.
While I was considering how best to go about doing generics, I came across this very nice write up on dev.</description></item><item><title>Deconstructing SPF Records with Rust</title><link>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust/</link><pubDate>Thu, 08 Apr 2021 10:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust/</guid><description>Hi. If you have visited my blog before you might have seen my series on using the trust-dns-resolver crate. As part of that series I looked at querying DNS TXT records. During the process I was reminded of SPF records. Something I used to deal with in a previous position. And this got me to thinking about using SPF records as a way to learn more about working with rust.</description></item><item><title>TXT lookup using the trust-dns-resolver Crate</title><link>https://bas-man.github.io/post/rust/rust-trust-dns-resolver-txt-lookup/</link><pubDate>Mon, 29 Mar 2021 11:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-trust-dns-resolver-txt-lookup/</guid><description>&lt;p>This is the third article on using the &lt;strong>trust-dns-resolver&lt;/strong> crate&lt;br>
&lt;strong>Warning: This code is not intended to be used in production. You should review and adjust to your own needs.&lt;/strong>&lt;/p></description></item><item><title>SOA lookup using the trust-dns-resolver Crate</title><link>https://bas-man.github.io/post/rust/rust-trust-dns-resolver-soa-lookup/</link><pubDate>Fri, 26 Mar 2021 12:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-trust-dns-resolver-soa-lookup/</guid><description>&lt;p>This is a second article on using the &lt;strong>trust-dns-resolver&lt;/strong> crate&lt;br>
&lt;strong>Warning: This code is not intended to be used in production. You should review and adjust to your own needs.&lt;/strong>&lt;/p></description></item><item><title>MX and Host lookup using the trust-dns-resolver Crate</title><link>https://bas-man.github.io/post/rust/rust-trust-dns-resolver-mx-and-host-lookup/</link><pubDate>Thu, 25 Mar 2021 15:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-trust-dns-resolver-mx-and-host-lookup/</guid><description>I used to often work with DNS in one of my previous jobs. So I have always had a long running interesting in DNS. Most recently I have been looking into Rust. I wanted to see how easy it might be to use rust to access DNS records, one; because rust is said to be fast, and also because it&amp;rsquo;s a safe programming language.
This will be a brief write up at my attempt to use trust-dns-resolver to do MX record lookups and subsequently host address lookups.</description></item><item><title>Google API Gmail LINE Notifications Part 7</title><link>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-7/</link><pubDate>Fri, 12 Feb 2021 09:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-7/</guid><description>&lt;p>Final part in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 6</title><link>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-6/</link><pubDate>Mon, 08 Feb 2021 13:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-6/</guid><description>&lt;p>Part 6 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 5</title><link>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-5/</link><pubDate>Thu, 04 Feb 2021 16:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-5/</guid><description>&lt;p>Part 5 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 4</title><link>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-4/</link><pubDate>Wed, 03 Feb 2021 09:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-4/</guid><description>&lt;p>Part 4 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 3</title><link>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-3/</link><pubDate>Mon, 01 Feb 2021 23:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-3/</guid><description>&lt;p>Part 3 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 2</title><link>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-2/</link><pubDate>Mon, 01 Feb 2021 14:15:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-2/</guid><description>&lt;p>Part 2 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 1</title><link>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-1/</link><pubDate>Mon, 01 Feb 2021 14:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api/google-api-gmail-notifications-1/</guid><description>&lt;p>This will be a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>.&lt;br>
The goal here is to be able to query gmail for a select set of emails. Process them and then send a notification. This could be altered to work with a Bot of some other service.&lt;/p></description></item><item><title>Generic Regex Match Function Multiple Groups</title><link>https://bas-man.github.io/post/generic-regex-match-function-multiple-groups/</link><pubDate>Tue, 12 Jan 2021 16:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/generic-regex-match-function-multiple-groups/</guid><description>If you have read my previous posts; you might know I am currently working on a new project to move some services to a self-hosted solution. As part of this, I have been working on dealing with unicode characters in regex.
In relation to this I have found that I am writing the same function repeatedly. The only difference being the number matches being returned. So I decided we need to refactor this.</description></item><item><title>Working with double-byte regex expressions with Python3</title><link>https://bas-man.github.io/post/regex-double-byte-python3/</link><pubDate>Tue, 05 Jan 2021 12:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/regex-double-byte-python3/</guid><description>As part of my project Self Hosted Zapier Alternative; I am having to deal with doing regex searches against the three Japanese written forms, Kanji, Hiragana and Katakana.
Fortunately this is a common problem. So I have found some references for this. Also one of my favourite tools for developing regex expressions, Regex101, also offers support in this area.
I found this useful Github Gist.
note:
You should also check the gist directly as there are some follow up comments and additions.</description></item><item><title>Project: Self Hosted Zapier Alternative</title><link>https://bas-man.github.io/post/self-hosted-zapier-alternative/</link><pubDate>Sat, 02 Jan 2021 23:00:39 +0900</pubDate><guid>https://bas-man.github.io/post/self-hosted-zapier-alternative/</guid><description>I am currently in the process of working out how I might replace some of my Zapier services. Why would I want to do this?
I use the free tier. (The process only runs once every 15 minutes. It used to be once every 5 mins.) Which means it has become a bit slow in sending the notifications. I want to learn how to use Docker Once I get a bit further along I will hopefully publish the python code to GitHub and document some of the issues and successes as I move along.</description></item><item><title>Send a notification through LINE with AppDaemon with Home Assistant</title><link>https://bas-man.github.io/post/home-assistant-appdaemon-line-notification/</link><pubDate>Thu, 17 Dec 2020 23:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/home-assistant-appdaemon-line-notification/</guid><description>The challenge Living in Japan we generally default to using LINE for our messaging needs. At the time of this writing there is no integration for LINE within Home Assistant. Currently I use PushOver for some of my Home Assistant notifications. I also use Zapier with email to trigger notifications to my family LINE group. You can see how I did this here and here.
I also track some Tile devices to know when family members are home.</description></item><item><title>Detect the OS Perl Code is Running Under</title><link>https://bas-man.github.io/post/detect-os-perl-code-running-under/</link><pubDate>Mon, 14 Dec 2020 13:19:33 +0900</pubDate><guid>https://bas-man.github.io/post/detect-os-perl-code-running-under/</guid><description>I was looking into updating a couple of my perl modules because rt.cpan.org is being sunset early in 2021. As part of this I thought it was time to stop cpan testers from testing my module under Windows since it is currently not really supported.
I was not sure how to go about doing this, so I reached out the good people in the &amp;ldquo;Perl Programmers&amp;rdquo; group on FaceBook. I got some great links and suggestions.</description></item><item><title>Use launchd instead of crontab on your Mac</title><link>https://bas-man.github.io/post/launchd-instead-of-cron/</link><pubDate>Tue, 18 Aug 2020 16:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/launchd-instead-of-cron/</guid><description>As of Mac OS 10.4 crontab has been depreciated but not ended. So its a good idea to know how to use its replacement under Mac OS. Welcome to Launchd.
This will be a short guide on how to use launchd in a simple form to replace a crontab job. In my case I am automating the backup of my Plex server. You can see my previous article here
Launchd has a lot of other features.</description></item><item><title>Publish your next Hugo blog post automatically using Github Actions</title><link>https://bas-man.github.io/post/hugo-auto-publish/</link><pubDate>Sat, 08 Aug 2020 08:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/hugo-auto-publish/</guid><description>The Challenge I wanted to be able to publish a new post that has already been written at a future date, without needing to manually publish the article.
The Solution Github Actions.
I already push updates to my site using github actions. So I thought why not have articles published in the future after they are written.
A little background. I do all my edits in a private GitHub repo. When I push to master in this repo.</description></item><item><title>Private Hugo Repo to Public on Github</title><link>https://bas-man.github.io/post/hugo-private-to-public-github/</link><pubDate>Thu, 06 Aug 2020 16:51:00 +0900</pubDate><guid>https://bas-man.github.io/post/hugo-private-to-public-github/</guid><description>I was researching ways of moving to Hugo for my site generator. I looked at a few options and as part of this I came a cross a workflow in github that allows me to store my site in a private repo and then publish the site to a public repo without too much fuss.
You can find the action here
I use the basic example config with minor changes to match my GitHub details.</description></item><item><title>CI on Github for Python</title><link>https://bas-man.github.io/post/github-python-action/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/github-python-action/</guid><description>So I finally thought it was time to start doing some continuous intergration testing as well as testing with multiple versions of Python.
I had been looking at using things such as CircleCI or Travis-ci. But I finally decided I would try to use Github&amp;rsquo;s workflow actions.
I did some searching and found some guides. As part of that I evenutally came a cross this link on Github&amp;rsquo;s own docs.</description></item><item><title>Back up your Plex Media Server on Mac OS</title><link>https://bas-man.github.io/post/plex-macos-backup/</link><pubDate>Sat, 16 May 2020 12:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/plex-macos-backup/</guid><description>The Challenge How to automate the backing up of my Plex Media Server
Solution A Bash Script
I wanted to automate this process. If I didn&amp;rsquo;t, it probably wouldn&amp;rsquo;t get done.
This script was adapted from another GitHub Gist that I found here.
You will probably need to modify the following variables.
plexDatabase plexPlistFile backupDirectory Pay attention to lines 17 ~ 21. These refer to the possibility that your script may not complete if your machine can go to sleep.</description></item><item><title>Delay Services launch until external drive mount is complete</title><link>https://bas-man.github.io/post/startup-apple-script/</link><pubDate>Thu, 14 May 2020 14:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/startup-apple-script/</guid><description>The Challenge How to give Drobo time to mount before processes that need access to it begin and hence block it&amp;rsquo;s mounting by having the mount point in use.
Solution AppleScript
Why was this an issue for me. Well I have a Drobo drive which is over 75% full. As a result it can take a while to mount and be detected by my old Mac Mini. This would mean that processes that use files from the Drobo would start before it was mounted.</description></item></channel></rss>