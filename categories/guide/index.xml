<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guide on Bas-Man's Musings</title><link>https://bas-man.github.io/categories/guide/</link><description>Recent content in Guide on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Mon, 01 Feb 2021 23:00:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/categories/guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Google API Gmail LINE Notifications Part 3</title><link>https://bas-man.github.io/post/google-api-gmail-notifications-3/</link><pubDate>Mon, 01 Feb 2021 23:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api-gmail-notifications-3/</guid><description>
&lt;p>Part 3 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Gmail Python Line Bot&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-1/">1. Installation &amp;amp; First Run&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-2/">2. Labels&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-3/">3. Getting the Emails&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>Hi. In this article I will be working through how to get a list of message_ids and to get the email associated with an id.&lt;/p>
&lt;p>I have done quite a bit of work with processing email in a past life. Working in Perl. I worked on a project which I am pretty sure predates mailchimp. So I have a solid understanding of Email and its standards.&lt;/p>
&lt;p>But this is my first venture into processing emails with Python. So I did some research and found a couple of guides. Neither were particularly great. But they at least pointed me in the right direction. This will be a distilled version of what I gleamed.
If you want to see one of the sources, then I refer you to &lt;a href="https://www.youtube.com/watch?v=vgk7Yio-GQw&amp;amp;t=108s">this&lt;/a>. The flow is not the best. But he gets there.&lt;/p>
&lt;p>For my purposes, I need to get a list of emails with the following conditions:&lt;/p>
&lt;ul>
&lt;li>Arrived within the last 5 minutes (not possible so need a label)&lt;/li>
&lt;li>Already labeled using Gmail filters.&lt;/li>
&lt;/ul>
&lt;p>I generally label key email with special labels. In my case I have three emails which already have labels applied when they come into my email account, so I will create a search using these labels.&lt;/p>
&lt;p>This means creating a Gmail search string which does the following.&lt;/p>
&lt;ol>
&lt;li>Gets all emails that have the labels I am interested in. Emails only need to have one of these labels.&lt;/li>
&lt;li>The email must be only 1 day old. (Can not limit search to newer emails)&lt;/li>
&lt;li>exclude email that have a label that will be added after processing. (Prevent re-processing) Processing once every 5 minutes.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>(label:labela OR label:labelb OR label:labelc)
&lt;ul>
&lt;li>This gives us all emails that have any of these labels attached.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>newer_than:1d
&lt;ul>
&lt;li>Limit to email that are only 24 hours older or newer.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>-label:processed
&lt;ul>
&lt;li>exclude email with this label&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The final search string looks like this:&lt;br>
&lt;code>((label:labela OR label:labelc OR label:labelc) AND -label:processed) AND newer_than:1d&lt;/code>&lt;/p>
&lt;p>So we want to add this as a CONSTANT that can be referred to later.&lt;br>
&lt;code>SEARCH_STRING = ((label:labela OR label:labelc OR label:labelc) AND -label:processed) AND newer_than:1d&lt;/code>&lt;/p>
&lt;p>How do I get a list of emails that match this search condition?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_message_ids&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">search_string&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">search&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">messages&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">search_string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">except&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">errors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">HttpError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">search&lt;/span>
&lt;span class="ln">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This returns a dictionary which contains two keys.&lt;/p>
&lt;ol>
&lt;li>messages -&amp;gt; List of dict() with two keys: 'id' and 'threadId'&lt;/li>
&lt;li>resultSizeEstimate -&amp;gt; number of messages in the response&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="s1">&amp;#39;messages&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;1775d10a91ba4249&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;threadId&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;threadId&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="s1">&amp;#39;resultSizeEstimate&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>id&lt;/code> is the idvidual email &lt;code>id&lt;/code> and &lt;code>threadId&lt;/code> is the email thread the &lt;code>id&lt;/code> belongs to.&lt;/p>
&lt;p>Calling this using:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">message_ids&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_message_ids&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEARCH_STRING&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember that &lt;code>service&lt;/code> comes from &lt;code>service = get_service()&lt;/code>&lt;/p>
&lt;p>We can use &lt;code>resultSizeEstimate&lt;/code> to determine if there are no matching messages.
Keeping in mind that any integer greater than zero is considered &lt;code>True&lt;/code>, we can make this function which will return &lt;code>True&lt;/code> or &lt;code>False&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">found_messages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message_ids&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message_ids&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;resultSizeEstimate&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will return &lt;code>False&lt;/code> when &lt;code>resultSizeEstimate&lt;/code> equals zero, or &lt;code>True&lt;/code> if it is greater than zero.&lt;/p>
&lt;p>I am not interested in threads. So I am going to get just a list of &lt;code>id&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_only_message_ids&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message_ids&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">ids&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">anId&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">message_ids&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;messages&amp;#39;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">ids&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">anId&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">ids&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here I am accessing the &lt;code>messages&lt;/code> dictionary to just get each message's &lt;code>id&lt;/code>
This will give me something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="s1">&amp;#39;1775d10a91ba4249&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>These are the individual ids for each email that were found with my search string.&lt;/p>
&lt;p>At some point I will need to loop through these ids to process each message. But these are just the ids. We need to get the actual email referenced using the ids we have.&lt;/p>
&lt;p>Let's get an actual email.&lt;br>
At this point we also need to add some more modules to our script.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">base64&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">email&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">email&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">parser&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">email&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">policy&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">messages&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">msg_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">format&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;raw&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">msg_in_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urlsafe_b64decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;raw&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ASCII&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">email_tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message_from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg_in_bytes&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">policy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">emailParser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">resulting_email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">emailParser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parsestr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">email_tmp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">as_string&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">resulting_email&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What are we doing here?&lt;/p>
&lt;ol>
&lt;li>Getting the message, a dictionary object.&lt;br>
This gives us:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">{&lt;/span> &lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;1775d10a91ba4249&amp;#39;&lt;/span>,
&lt;span class="ln"> 2&lt;/span> &lt;span class="s1">&amp;#39;threadId&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>,
&lt;span class="ln"> 3&lt;/span> &lt;span class="s1">&amp;#39;labelIds&amp;#39;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="s1">&amp;#39;Label_18&amp;#39;&lt;/span>,
&lt;span class="ln"> 5&lt;/span> &lt;span class="s1">&amp;#39;CATEGORY_PERSONAL&amp;#39;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">]&lt;/span>,
&lt;span class="ln"> 7&lt;/span> &lt;span class="s1">&amp;#39;snippet&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;REDACTED REDACTED 様の入退室情報をお知らせします。 【セーフティメール情報】 2021-02-01 19:08:26 に退室しました。 ※なお、このメールに返信することはできませんのでご注意ください。&amp;#39;&lt;/span>,
&lt;span class="ln"> 8&lt;/span> &lt;span class="s1">&amp;#39;sizeEstimate&amp;#39;&lt;/span>: 3448,
&lt;span class="ln"> 9&lt;/span> &lt;span class="s1">&amp;#39;raw&amp;#39;&lt;/span>:
&lt;span class="ln">10&lt;/span> &lt;span class="s1">&amp;#39;RGVsaXZlcmVkLVRvOiBiYXNwYW5uQGdtYWlsLmNvbQ0KUmVjZWl2ZWQ6IGJ5IDIwMDI6YWRm
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="s1"> Ojk1MDY6MDowOjA6MDowIHdpdGggU01UUCBpZCA2Y3NwMzg1MzYyd3JzOw0KICAgICAgICBNb2
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s1"> ....snip...
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s1"> 6MDg6MjYgGyRCJEtCYDw8JDckXiQ3JD8hIxsoQg0KDQobJEIiKCRKJCohIiQzJE4lYSE8JWskS
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="s1"> 0pWPy4kOSRrJDMkSCRPJEckLSReJDskcyROJEckNENtMFUkLyRAJDUkJCEjGyhCDQoNCg==&amp;#39;&lt;/span>,
&lt;span class="ln">15&lt;/span> &lt;span class="s1">&amp;#39;historyId&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;3086929&amp;#39;&lt;/span>,
&lt;span class="ln">16&lt;/span> &lt;span class="s1">&amp;#39;internalDate&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;1612174106000&amp;#39;&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not so useful, but we could probably do something with the &lt;code>snippet&lt;/code>, but I have read this is not provided with the api with all languages. Your milage may differ.&lt;/p>
&lt;ol start="2">
&lt;li>Then access the &lt;code>raw&lt;/code> key which is base64 encoded. This key gives us the byte string format of the entire email including headers.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>b&lt;span class="s1">&amp;#39;Delivered-To: redact@example.com\r\nReceived: by 2002:adf:9506:0:0:0:0:0
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="s1"> with SMTP id 6csp385362wrs;\r\n Mon, 1 Feb 2021 02:08:29 -0800 (PST)
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s1"> \r\nX-Googl..snip....
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="s1"> \r\n\r\n\x1b$B&amp;#34;($J$*!&amp;#34;$3$N%a!&amp;lt;%k$KJV?.$9$k$3$H$O$G$-$^$;$s$N$G$4Cm0U$/$@$5$$!#\x1b(B
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="s1"> \r\n\r\n&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a little more useful, but again in this case it's been encoded due to the character set that was used in the email.&lt;/p>
&lt;ol start="3">
&lt;li>Create a Email Parser object to process the byte string email&lt;/li>
&lt;li>Read this byte string and create an &lt;code>email.message.EmailMessage&lt;/code> object.&lt;/li>
&lt;/ol>
&lt;p>The last two steps get us closer. The email is still character encoded. But it's ready for us to use in the next step.&lt;/p>
&lt;p>&lt;em>Comment&lt;/em>&lt;br>
It is my understanding that email was developed to only support the ascii character set. As a result, encodings have been added to support other languages. This means that a lot of email are not really human readable by default.&lt;br>
If you are interested you can take a peek at &lt;a href="https://tools.ietf.org/html/rfc2045">RFC2045&lt;/a>&lt;/p>
&lt;p>Note:&lt;br>
I am using:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">email_tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message_from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg_in_bytes&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">policy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">emailParser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>policy.default&lt;/code> is relatively new. Processing email this way means, I don't have to check the encoding of the contents. The parser will handle that for me. I can skip checking if the string is &lt;code>UTF-8&lt;/code> or &lt;code>ISO-2022-JP&lt;/code>. I am doing this because the emails I am dealing with are in Japanese as I live in Tokyo. If you are dealing with only english and emails that are only in ascii encoded, you can simplify the get_message() function.&lt;/p>
&lt;p>In the next section I will look at processing a single email to get the information I am interested in.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 2</title><link>https://bas-man.github.io/post/google-api-gmail-notifications-2/</link><pubDate>Mon, 01 Feb 2021 14:15:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api-gmail-notifications-2/</guid><description>
&lt;p>Part 2 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Gmail Python Line Bot&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-1/">1. Installation &amp;amp; First Run&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-2/">2. Labels&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-3/">3. Getting the Emails&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;!---
| [4. Notification]()
| [5. Systemd / Cron]()
--->
&lt;hr>
&lt;p>Hi again. If you followed the guide I referenced in the previous post. &lt;a href="https://medium.com/better-programming/a-beginners-guide-to-the-google-gmail-api-and-its-documentation-c73495deff08">A Beginner’s Guide to the Gmail API and Its Documentation&lt;/a>. The next section will be somewhat familiar.&lt;/p>
&lt;p>In this section we will be accessing the labels used within Gmail, creating a new label, and also getting the new label's &lt;strong>id&lt;/strong>. The id is critical because the google API does not use the label's name. It is merely the name displayed in the user interface.&lt;/p>
&lt;p>I am going to structure some of the code also at this point.&lt;/p>
&lt;p>This will be the new starting code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">pickle&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">os.path&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">googleapiclient.discovery&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">build&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">google_auth_oauthlib.flow&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">InstalledAppFlow&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">google.auth.transport.requests&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Request&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># If modifying these scopes, delete the file token.pickle.&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="n">SCOPES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;https://www.googleapis.com/auth/gmail.modify&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s1">&amp;#39;https://www.googleapis.com/auth/gmail.labels&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_service&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Shows basic usage of the Gmail API.
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s2"> Lists the user&amp;#39;s Gmail labels.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1"># The file token.pickle stores the user&amp;#39;s access and refresh tokens, and is&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1"># created automatically when the authorization flow completes for the first&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1"># time.&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pickle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1"># If there are no (valid) credentials available, let the user log in.&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valid&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">expired&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">refresh_token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">refresh&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">flow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">InstalledAppFlow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_client_secrets_file&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="s1">&amp;#39;credentials.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SCOPES&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">flow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run_local_server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="c1"># Save the credentials for the next run&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;wb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="n">pickle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">creds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="c1"># Another option to ignore google cache logging issue&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="c1"># service = build(&amp;#39;gmail&amp;#39;, &amp;#39;v1&amp;#39;, credentials=creds, cache_discovery=False)&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gmail&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;v1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">credentials&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">creds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">service&lt;/span>
&lt;span class="ln">36&lt;/span>
&lt;span class="ln">37&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="n">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_service&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">40&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">43&lt;/span>
&lt;span class="ln">44&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have moved the code that will connect to the API into its own function call &lt;em>get_service&lt;/em> which returns an object we can use to access the API.
The keen reader my have noticed that I have updated the SCOPES. I will be modifying emails in a later post in the series and we also need access to the labels to be able to read and modify them.&lt;/p>
&lt;p>The next set of functions will be added to the file just above: &lt;strong>def main():&lt;/strong>&lt;/p>
&lt;p>First may want to be able to get a list of all the labels we have in our Gmail account. This can be done using this code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_labels&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">list_of_labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">list_of_labels&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;labels&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>get_labels return a list of json objects. Which are just dictionaries in python.&lt;/p>
&lt;p>Next we may want to create a new label to use with Gmail. This can be done with following code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">define_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mlv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;show&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">llv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;labelShow&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;messageListVisibility&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mlv&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;labelListVisibility&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">llv&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">label&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the simplest json form that will create a valid label in Gmail.
If we call this function:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">define_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>we get the following json string:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>{
&lt;span class="ln">2&lt;/span> &amp;#39;messageListVisibility&amp;#39;: &amp;#39;show&amp;#39;,
&lt;span class="ln">3&lt;/span> &amp;#39;labelListVisibility&amp;#39;: &amp;#39;labelShow&amp;#39;,
&lt;span class="ln">4&lt;/span> &amp;#39;name&amp;#39;: &amp;#39;test&amp;#39;
&lt;span class="ln">5&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After creating this object we want to actually add it to Gmail. We can do that using the following code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">add_label_to_gmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">created_label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">created_label&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What add_label_to_gmail() does is call the API with a body of json containing the information to create a new label within Gmail. If there is a problem, for example, trying to add a new label when one with the name already exists; we will get an exception.&lt;br>
If everything goes well we will get a new json containing the original json we created, &lt;em>but&lt;/em> it will also now contain the label's &lt;em>id&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>{
&lt;span class="ln">2&lt;/span> &amp;#39;id&amp;#39;: &amp;#39;Label_30&amp;#39;,
&lt;span class="ln">3&lt;/span> &amp;#39;name&amp;#39;: &amp;#39;test&amp;#39;,
&lt;span class="ln">4&lt;/span> &amp;#39;messageListVisibility&amp;#39;: &amp;#39;show&amp;#39;,
&lt;span class="ln">5&lt;/span> &amp;#39;labelListVisibility&amp;#39;: &amp;#39;labelShow&amp;#39;
&lt;span class="ln">6&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can now get that new &lt;em>id&lt;/em> using the next function&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_new_label_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new_label&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">new_label&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This simply returns label as a string.&lt;/p>
&lt;p>In practice this means making the following set of calls.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">new_label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">define_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">new_label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add_label_to_gmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_label&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">new_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_new_label_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new_label&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But why or how do we use this new &lt;em>id&lt;/em> once its been created and added to Gmail?&lt;br>
As mentioned at in the first article. I am working on making a system that queries and sends notifications based on some emails. I have a need to query Gmail fairly frequently during certain times of the day, say once every 5 minutes. Gmail's search options only allows me to limit my search conditions to emails that are newer_than:1day. That means, I will see the same emails repeatedly triggering multiple notifications.&lt;/p>
&lt;p>The fix? Add a label when a message is processed and then use &lt;em>-label:labelname&lt;/em> in the search string. Meaning that once an email is processed. It won't get processed a second time.&lt;/p>
&lt;p>How do you add a label to a message?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">add_label_to_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">label_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">messages&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">modify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">msg_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;removeLabelIds&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="s1">&amp;#39;addLabelIds&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">label_id&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1"># Do something here. print or log&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This takes the service, a msg_id, and the label_id we got after creating the new label.&lt;/p>
&lt;p>Where does the msg_id come from? That is a story for the next post in our series.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 1</title><link>https://bas-man.github.io/post/google-api-gmail-notifications-1/</link><pubDate>Mon, 01 Feb 2021 14:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api-gmail-notifications-1/</guid><description>
&lt;p>This will be a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>&lt;br>
The goal here is to be able to query gmail for a select set of emails. Process them and then send a notification. This could be altered to work with a Bot of some other service.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Gmail Python Line Bot&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-1/">1. Installation &amp;amp; First Run&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-2/">2. Labels&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-3/">3. Getting the Emails&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>So let's get started. I am going to take a short cut here because I believe that if there is already a good guide; then you shouldn't rehash what has been done before. Unless you are adding to it. So I would suggest following one of the guides below and then move on to step two when you are ready.&lt;/p>
&lt;p>Getting started with Python and Gmail API. Head over to
&lt;a href="https://developers.google.com/gmail/api/quickstart/python">Python Quick Start&lt;/a> or my prefered option &lt;a href="https://medium.com/better-programming/a-beginners-guide-to-the-google-gmail-api-and-its-documentation-c73495deff08">A Beginner’s Guide to the Gmail API and Its Documentation&lt;/a> which I found to be well presented and informative.&lt;/p>
&lt;p>It boils down to, enabling the API, installing the required modules, and copying the provided code. Don't forget to download the &lt;em>credentials file&lt;/em> you will be given by Google.&lt;/p>
&lt;p>&lt;em>Note: I am going to be using python 3&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add the folowing code to a file, lets just call it &lt;em>gmail.py&lt;/em>&lt;/p>
&lt;p>&lt;em>Note: I have removed the following&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>from __future__ import print_function
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please keep this if you are using Python 2&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">pickle&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">os.path&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">googleapiclient.discovery&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">build&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">google_auth_oauthlib.flow&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">InstalledAppFlow&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">google.auth.transport.requests&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Request&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># If modifying these scopes, delete the file token.pickle.&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="n">SCOPES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;https://www.googleapis.com/auth/gmail.readonly&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Shows basic usage of the Gmail API.
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s2"> Lists the user&amp;#39;s Gmail labels.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1"># The file token.pickle stores the user&amp;#39;s access and refresh tokens, and is&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1"># created automatically when the authorization flow completes for the first&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1"># time.&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pickle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1"># If there are no (valid) credentials available, let the user log in.&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valid&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">expired&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">refresh_token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">refresh&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">flow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">InstalledAppFlow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_client_secrets_file&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="s1">&amp;#39;credentials.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SCOPES&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">flow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run_local_server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="c1"># Save the credentials for the next run&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;wb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="n">pickle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">creds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="n">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gmail&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;v1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">credentials&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">creds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">34&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="c1"># Call the Gmail API&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;labels&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;span class="ln">38&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;No labels found.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Labels:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">label&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">45&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>A note on the sign in process. This may not work if you are using safari, so use Brave or some other browser if needed. You can copy and paste the link generated in your terminal for this.&lt;/em>&lt;/p>
&lt;p>When you are done. You can move on to the next article in the series.&lt;/p></description></item><item><title>Raspberry Pi Stretch to Buster Missing Steps</title><link>https://bas-man.github.io/post/raspberry-stretch-to-buster-missing-steps/</link><pubDate>Fri, 11 Dec 2020 13:00:30 +0900</pubDate><guid>https://bas-man.github.io/post/raspberry-stretch-to-buster-missing-steps/</guid><description>
&lt;p>I recently went through the process of upgrading my raspberry Pis from Stretch to Buster. I had previously done this moving from Jessie.&lt;/p>
&lt;p>Whilst I had no real issues with task following the guides that I found. I did discover one thing that concerned me, and was missing from the guides.&lt;/p>
&lt;p>After upgrading to Buster, my &lt;code>/boot&lt;/code> had less than 200kb of free storage.&lt;/p>
&lt;p>I did some reading and found that Buster seems to need a lot more space in &lt;code>/boot&lt;/code> than for previous releases. Buster itself now defaults to 256M of space for &lt;code>/boot&lt;/code>&lt;/p>
&lt;p>So I went about solving this issue.&lt;/p>
&lt;p>I would suggest that you do these steps before upgrading just to avoid any possible problems.&lt;/p>
&lt;h2 id="warning">Warning!&lt;/h2>
&lt;p>This action does have the potential to cause data loss. You should backup your data onto another device. Use a tool such as &lt;a href="https://www.balena.io/etcher/">etcher&lt;/a> to make a block copy of your disk.&lt;/p>
&lt;h3 id="what-you-will-need">What you will need&lt;/h3>
&lt;ul>
&lt;li>A spare Linux machine with gui interface.
&lt;ul>
&lt;li>Alternatively, if you have a spare SD card, you can install Buster or Stretch on to that and boot from it. Then use the original hardware to update the previously exiting card.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>USB card reader.&lt;/li>
&lt;li>monitor, keyboard and mouse&lt;/li>
&lt;li>&lt;code>gparted&lt;/code> installed.&lt;/li>
&lt;/ul>
&lt;h3 id="the-steps">The steps&lt;/h3>
&lt;p>These are the basic steps that will need to be followed.&lt;/p>
&lt;ol>
&lt;li>Shrink the rootfs and run check&lt;/li>
&lt;li>Move rootfs to the right using the mouse to drag it to the right, and run check (this will take some time)&lt;/li>
&lt;li>Expand /boot partition to 256M and run check&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>There could be issues with this last step. We will cover them later.&lt;/li>
&lt;/ul>
&lt;h4 id="getting-situated">Getting situated&lt;/h4>
&lt;p>If you have spare linux machine. Set it up and getting it running with the SD card reader attached.&lt;/p>
&lt;p>If you don't have a spare machine, but have a spare SD card. Install your preferred linux distro. Shutdown the existing server and then swap out the old SD card for the new and get it running with all the required attached devices.&lt;/p>
&lt;p>If it does not boot up into x-windows by default, login and then issue the command &lt;code>startx&lt;/code>. If you have issues, then use &lt;code>sudo&lt;/code> to execute as root.
Launch &lt;code>gparted&lt;/code> either using a terminal or through the drop down menu system. If gparted is not installed. Open a terminal and issue the following commands.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>apt update
&lt;span class="ln">2&lt;/span>apt install gparted
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Insert the old SD card in to the reader and give gparted a few moments to scan the devices.
&lt;strong>Be careful here. We want to make sure that we are working with the correct device and not the SD card we are booting from. So make sure to select the correct&lt;/strong> &lt;em>/dev&lt;/em> &lt;strong>device.&lt;/strong> It should be mounted on the system as &lt;em>/media/XXX&lt;/em>&lt;/p>
&lt;p>Rather than rewrite something that has been covered on other sites. I would direct you to the sites below.&lt;/p>
&lt;p>&lt;a href="https://learn.adafruit.com/resizing-raspberry-pi-boot-partition/edit-partitions">https://learn.adafruit.com/resizing-raspberry-pi-boot-partition/edit-partitions&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://bugzilla.gnome.org/show_bug.cgi?id=649324">https://bugzilla.gnome.org/show_bug.cgi?id=649324&lt;/a>&lt;/p></description></item><item><title>Presence Detection with BLE using monitor.sh &amp; Home Assistant</title><link>https://bas-man.github.io/post/ble-presence-detection-home-assistant/</link><pubDate>Thu, 12 Nov 2020 10:35:00 +0900</pubDate><guid>https://bas-man.github.io/post/ble-presence-detection-home-assistant/</guid><description>
&lt;p>I have been running &lt;a href="https://www.home-assistant.io/hassio/">Home Assistant&lt;/a> for a while. Things are going well. But I have had some issues with presence detection using the standard &lt;em>device_tracker&lt;/em> component. Though I live in a small place, being in Tokyo, Home Assistant sometimes stops detecting phones if they are in an area of the apartment a little away from the Home Assistant server. This I suspect is due to the position of the Raspberry Pi and the building material.&lt;/p>
&lt;p>Doing some research I came across a possible solution using multiple BLE devices. I have opted to use &lt;a href="https://github.com/andrewjfreyer/monitor">Monitor&lt;/a> a bash script solution.&lt;/p>
&lt;p>This is a guide mostly for myself. I need to remember how it was setup. My approach has been to try and avoid rewriting my configuration and use most of my existing &lt;em>tracker_device&lt;/em> automations.&lt;/p>
&lt;h3 id="setup-mosquitto-mqtt-on-your-home-assistant">Setup Mosquitto (MQTT) on your Home Assistant&lt;/h3>
&lt;p>I configured MQTT to use a username and password. This is all that is really needed to get things started.
If MQTT is already setup. Skip this step.&lt;/p>
&lt;h3 id="hardware">Hardware&lt;/h3>
&lt;p>In addition to my Home Assistant server. I have:&lt;/p>
&lt;ul>
&lt;li>Raspberry Pi Zero WH&lt;/li>
&lt;li>Raspberry Pi 2 + Bluetooth dongle&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;h4 id="os">OS&lt;/h4>
&lt;p>For the most part I followed the guide at Level1Techs.&lt;/p>
&lt;h4 id="setup-your-raspberry-pi-zero-wh">Setup your Raspberry Pi Zero W(H)&lt;/h4>
&lt;ol>
&lt;li>Download Raspbian&lt;/li>
&lt;li>Image Raspbian&lt;/li>
&lt;li>Mount the Boot Partition&lt;/li>
&lt;li>Create wpa_supplicant.conf with this config:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="nv">country&lt;/span>&lt;span class="o">=&lt;/span>US
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">ctrl_interface&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">DIR&lt;/span>&lt;span class="o">=&lt;/span>/var/run/wpa_supplicant &lt;span class="nv">GROUP&lt;/span>&lt;span class="o">=&lt;/span>netdev
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nv">update_config&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">network&lt;/span>&lt;span class="o">={&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nv">ssid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Wireless Network Name&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nv">psk&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Wireless Network Password&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nv">key_mgmt&lt;/span>&lt;span class="o">=&lt;/span>WPA-PSK
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>touch ssh&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span> touch ssh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Step 5 will enable ssh to your device.&lt;/p>
&lt;h4 id="finding-your-new-pi-on-the-network">Finding your new Pi on the network&lt;/h4>
&lt;p>If your network is small you can simply run:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>arp -a
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will give you a list of devices currently connected to your network. So run this once before you power up the new Pi.&lt;/p>
&lt;p>After you power up the Pi. Run the &lt;em>arp&lt;/em> command again and see which new address appears in your list.&lt;/p>
&lt;p>ssh into the new Pi using the standard username and password. Don't forget to change the password just as a matter of good security practice.&lt;/p>
&lt;h4 id="packages--monitor">Packages / monitor&lt;/h4>
&lt;h5 id="update-system-and-packages">Update system and packages&lt;/h5>
&lt;p>Issue the follow commands&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>apt update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt upgrade
&lt;span class="ln">2&lt;/span>apt dist-upgrade
&lt;span class="ln">3&lt;/span>apt install pi-bluetooth
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next reboot the device and login again once it's up.&lt;/p>
&lt;h5 id="install-git-and-mosquitto">Install git and Mosquitto&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>wget http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key
&lt;span class="ln">2&lt;/span>sudo apt-key add mosquitto-repo.gpg.key
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you are running Sketch&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>wget http://repo.mosquitto.org/debian/mosquitto-stretch.list
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you are running Buster&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>wget http://repo.mosquitto.org/debian/mosquitto-buster.list
&lt;/code>&lt;/pre>&lt;/div>&lt;p>then&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>apt-get update
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have any issues. Take a look at &lt;strong>The Level 1 Way&lt;/strong> guide listed below. You may need to install some additional packages.&lt;/p>
&lt;h5 id="setup-monitor">Setup Monitor&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>pi@raspberrypi:~ $ git clone https://github.com/andrewjfreyer/monitor.git
&lt;span class="ln">2&lt;/span>pi@raspberrypi:~ $ &lt;span class="nb">cd&lt;/span> monitor/
&lt;span class="ln">3&lt;/span>pi@raspberrypi:~/monitor $ chmod +x ./monitor.sh
&lt;span class="ln">4&lt;/span>pi@raspberrypi:~/monitor $ ./monitor.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I suggest running the command a few times to learn how monitor.sh works. Also this needs to be done to create the initial setup files that we will be editing. You might need to run the command with sudo if you are not logged in as root. When you are satisfied check that &lt;strong>monitor&lt;/strong> is running with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>systemctl status monitor
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If not:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>systemctl &lt;span class="nb">enable&lt;/span> monitor
&lt;span class="ln">2&lt;/span>systemctl start monitor
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I will not document how I edited the &lt;strong>/etc/systemd/system/monitor.services&lt;/strong> file. You will find information on options that others have used in the links below.&lt;/p>
&lt;p>Next add any BT MAC addresses that you know to the &lt;strong>known_static_addresses&lt;/strong> file.&lt;/p>
&lt;p>One thing to note. The &lt;em>alias&lt;/em> will be the name of the device in MQTT. If there is no alias, the MAC address will be used. More on this later.&lt;/p>
&lt;p>&lt;strong>Updated 2020/Nov/12&lt;/strong>&lt;/p>
&lt;p>If you are monitoring a &lt;em>Tile Device&lt;/em> do not place it in the &lt;strong>known_static_addresses&lt;/strong>. This will make monitor see the device twice. Once with confidence 100% and again with 0%. The work a round that I have seen it to not place its MAC address in the file. You will need to use the MAC address instead of an alias in the sensor configuration.&lt;/p>
&lt;p>&lt;strong>References&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://community.home-assistant.io/t/bluetooth-le-tracker-issues/97705/33">1. Home Assistant Community - Bluetooth-le-Tracking-Issues&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://community.home-assistant.io/t/monitor-reliable-multi-user-distributed-bluetooth-occupancy-presence-detection/68505/1416">2. Home Assistant Community - monitor-reliable-multi-user-distributed-bluetooth-occupancy-presence-detection&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/andrewjfreyer/monitor/issues/183">3. GitHub - Active scanner + overrule HA 'consider_home' #183&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># ---------------------------&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># STATIC MAC ADDRESS LIST&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="c1"># 00:00:00:00:00:00 Alias #comment&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="c1"># ---------------------------&lt;/span>
&lt;span class="ln">7&lt;/span> 00:00:00:00:00:00 person1_Phone
&lt;span class="ln">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Configure &lt;strong>mqtt_preferences&lt;/strong> so that we can connect and publish to our MQTT topics. &lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># ---------------------------&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># MOSQUITTO PREFERENCES&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># ---------------------------&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># IP ADDRESS OR HOSTNAME OF MQTT BROKER&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nv">mqtt_address&lt;/span>&lt;span class="o">=&lt;/span>192.168.X.X
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># MQTT BROKER USERNAME&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nv">mqtt_user&lt;/span>&lt;span class="o">=&lt;/span>mqtt_username &lt;span class="c1"># This is what was configured on the MQTT Server.&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1"># MQTT BROKER PASSWORD&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="nv">mqtt_password&lt;/span>&lt;span class="o">=&lt;/span>password &lt;span class="c1">#Same case as username.&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1"># MQTT PUBLISH TOPIC ROOT&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nv">mqtt_topicpath&lt;/span>&lt;span class="o">=&lt;/span>monitor &lt;span class="c1"># &amp;lt;- most configs use this.&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1"># PUBLISHER IDENTITY&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nv">mqtt_publisher_identity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;livingarea&amp;#39;&lt;/span> &lt;span class="c1">#&amp;lt;- ID for one of the Pi servers eg. Pi Zero W&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="c1"># MQTT PORT&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="nv">mqtt_port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;1883&amp;#39;&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="c1"># MQTT CERTIFICATE FILE&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nv">mqtt_certificate_path&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="c1">#MQTT VERSION (EXAMPLE: &amp;#39;mqttv311&amp;#39;)&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="nv">mqtt_version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="note">Note:&lt;/h4>
&lt;p>&lt;strong>mqtt_topicpath&lt;/strong> should be the same on each of your monitoring servers.&lt;/p>
&lt;p>&lt;strong>mqtt_publisher_identity&lt;/strong> must be unique for each server that will be sending MQTT messages to the HA server.&lt;/p>
&lt;p>Test that MQTT server is getting the new notifications from your Pi devices.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>mosquitto_sub -h 192.168.X.X -u username -P passwd -t monitor/#
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># Output&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;00:00:00:00:00:00&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;confidence&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;100&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;person1_Phone&amp;#34;&lt;/span>,
&lt;span class="ln">5&lt;/span> &lt;span class="s2">&amp;#34;manufacturer&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;Apple Inc&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;KNOWN_MAC&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;retained&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>,
&lt;span class="ln">6&lt;/span> &lt;span class="s2">&amp;#34;timestamp&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;.....&amp;#34;&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we can see that devices are being seen and their &lt;em>confidence level&lt;/em> from the &lt;em>monitor.sh&lt;/em> is being reported.&lt;/p>
&lt;p>At this point, after setting up all of the monitoring devices, it is time to move onto setting up HA.&lt;/p>
&lt;h3 id="home-assistant-configuration">Home Assistant Configuration.&lt;/h3>
&lt;h4 id="setup-the-sensor-part-of-the-configuration">Setup the sensor part of the configuration.&lt;/h4>
&lt;p>We need to collect the MQTT messages into HA&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mqtt&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">state_topic&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;monitor/front/person1_phone&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value_template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;{{ value_json.confidence }}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">unit_of_measurement&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Person1 Phone Front&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mqtt&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">state_topic&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;monitor/livingarea/person1_phone&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value_template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;{{ value_json.confidence }}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">unit_of_measurement&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Person1 Phone Living Area&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="added-2020nov12">Added 2020/Nov/12&lt;/h4>
&lt;h5 id="tile-device-example">Tile Device Example&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mqtt&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">state_topic&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;monitor/front/XX::XX:XX:XX:XX:XX&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value_template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;{{ value_json.confidence }}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">unit_of_measurement&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Person1 Phone Front&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mqtt&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">state_topic&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;monitor/livingarea/XX::XX:XX:XX:XX:XX&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value_template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;{{ value_json.confidence }}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">unit_of_measurement&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Person1 Phone Living Area&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>I have two entries as I have two devices running &lt;strong>monitor&lt;/strong> in two locations in my home.&lt;/li>
&lt;li>The topic is &lt;em>person1_phone&lt;/em> which matches the alias used in the &lt;strong>known_static_addresses&lt;/strong> file. If there was not an alias. These would be the actual MAC Addresses.&lt;/li>
&lt;/ol>
&lt;p>The next part is still a work in progress. This is still in the sensor.yaml file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">min_max&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Person1 Phone Home Confidence&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mean&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">round_digits&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">entity_ids&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sensor.person1_phone_front&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">sensor.person1_phone_living_area&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This combines these two sensors and return the mean of their two values. In my case this often returns 50% since only one monitor server can detect the phone based on where it is.&lt;/p>
&lt;p>Next we create a sensor that will return a 'True' or 'False' state. As mentioned my min_max generally returns 50%. So I want to have 'True' if the value is &amp;gt; 45% for safety.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">template&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sensors&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">is_person1_home&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">friendly_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Is Person1 Home?&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value_template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;{{ state_attr(&amp;#34;sensor.person1_home_confidence&amp;#34;,&amp;#34;mean&amp;#34;) | float &amp;gt; 45 }}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;strong>value_template&lt;/strong> could probably be changed to
&lt;em>states('sensor.person1_home_confidence')&lt;/em>.&lt;/p>
&lt;p>At this point we have a sensor that returns true or false if it can see the bluetooth device we are looking for. But it's not actually connected to any HA automations.&lt;/p>
&lt;p>In my existing configuration I am using&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bluetooth_le_tracker&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bluetooth_tracker&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which auto populates the &lt;strong>known_devices&lt;/strong> file.
These devices are then used as triggers for my automations. I want to avoid making larges changes. So we are going to make some virtual device_trackers. These will replace the ones created using the provided bluetooth trackers.&lt;/p>
&lt;p>In the &lt;strong>devices_tracker&lt;/strong> configuration file we will add something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mqtt&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">source_type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;bluetooth&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">devices&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">person1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;location/person1&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are basically saying that we are want an MQTT Topic called location/person1. We will be publishing state to this with some scripts later.&lt;/p>
&lt;p>This is where I actually got stuck and it wasn't until I found &lt;a href="https://community.home-assistant.io/t/combining-multiple-device-trackers-into-one-using-mqtt/45324">this bit of wisdom&lt;/a> that things fell into place.&lt;/p>
&lt;p>We need to manaully add entries to the &lt;strong>known_devices&lt;/strong> file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>&lt;span class="nt">person1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hide_if_away&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">icon&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mac&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">picture&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">vendor&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">track&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Test Person&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We now have a &lt;strong>device_tracker.person1&lt;/strong> which will have its state taken from &lt;strong>MQTT:location/person1&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;p>If you test this state you will get a &lt;strong>source: null&lt;/strong>. This will not be set until we first publish to MQTT.&lt;/p>
&lt;h4 id="moving-on-to-the-scripts">Moving on to the scripts&lt;/h4>
&lt;p>Now we need to start being able to update the &lt;strong>MQTT:location/person1&lt;/strong> so that &lt;strong>device_tracker.person1&lt;/strong> will have either a &lt;strong>'home'&lt;/strong> or &lt;strong>'not_home'&lt;/strong> state.&lt;/p>
&lt;p>We will edit our script configuration files.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">&amp;#39;person1_home&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">alias&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Person1 Home&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sequence&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mqtt.publish&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">topic&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">location/person1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">payload&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;home&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">&amp;#39;person1_away&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">alias&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Person1 away&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sequence&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mqtt.publish&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">topic&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">location/person1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">payload&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;not_home&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These two scripts will update the device_tracker so that we can use their state. We will need an automation so that the state is updated.&lt;/p>
&lt;p>But I will add a bonus script here as well. This will trigger a bluetooth rescan. This can be triggered on a restart of HA with an automation.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>&lt;span class="nt">&amp;#39;bt_rescan&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">alias&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Issue BT Rescan&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sequence&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mqtt.publish&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">topic&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">monitor/scan/restart&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">payload&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add the following configuration to automations.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>- &lt;span class="nt">alias&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Set Person home&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initial_state&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;on&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">trigger&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">state&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">entity_id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sensor.is_person1_home&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">homeassistant&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">event&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">start&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">state&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">entity_id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;sensor.is_person1_home&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">state&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;True&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">script.person1_home&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">alias&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Set Person1 away&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">initial_state&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;on&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">trigger&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">state&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">entity_id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sensor.is_person1_home&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">homeassistant&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">event&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">start&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">state&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">entity_id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;sensor.is_person1_home&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">state&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;False&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">script.person1_away&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is where we link everything together. We also have the automations trigger when HA starts up. So we get some initial state.&lt;/p>
&lt;p>I personally also opted to have a BT scan triggered when ever HA restarts.&lt;/p>
&lt;p>I added this configuration to automations.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>&lt;span class="nt">alias&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HA Started&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">initial_state&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;on&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">trigger&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">homeassistant&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">event&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">start&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">script.bt_rescan&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The final step is the replace all the previous device_tracker references with the new manaully created ones listed in &lt;strong>known_devices.yaml&lt;/strong>&lt;/p>
&lt;h3 id="final-thoughts">Final Thoughts&lt;/h3>
&lt;p>This is not yet an Ideal setup. I am still working on it. But if you look at the blog links below you might get some more ideas. I am still reading through them and improving things.&lt;/p>
&lt;p>As I stated at the start. This is mostly for me so that I have some documentation for myself.&lt;/p>
&lt;p>But I hope others might find it useful. Since I had to work through it and piece it together.&lt;/p>
&lt;p>Thanks to those who posted the work online. It was invaluable. The main part I found missing was the &lt;strong>known_devices.yaml&lt;/strong>&lt;/p>
&lt;hr/>
&lt;h3 id="references">References&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://forum.level1techs.com/t/bluetooth-presence-detection-for-home-automation-the-level1-way/148516">Bluetooth Presence Detection for Home Automation – The Level1 Way&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://community.home-assistant.io/t/monitor-reliable-multi-user-distributed-bluetooth-occupancy-presence-detection/68505">[monitor] Reliable, Multi-User, Distributed Bluetooth Occupancy/Presence Detection&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="these-are-links-to-a-single-ha-user-the-config-is-far-beyond-what-i-need-but-its-a-great-resource">These are links to a single HA user. The config is far beyond what I need. But it's a great resource&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://blog.ceard.tech/2019/03/presence-detection-are-we-nearly-there.html">Presence detection - are we nearly there yet?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.ceard.tech/2019/10/presence-detection-final-countdown.html">Presence detection, the final countdown?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.ceard.tech/2018/09/a-while-back-i-covered-how-i-was-doing.html">Presence detection updated&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/DubhAd/Home-AssistantConfig">GitHub Repo&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="some-missing-magic">Some missing Magic&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://community.home-assistant.io/t/combining-multiple-device-trackers-into-one-using-mqtt/45324">The missing magic to make MQTT State usable as a device_tracker&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="software">Software&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/andrewjfreyer/monitor">Monitor&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>