<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>txt on Bas-Man's Musings</title><link>https://bas-man.github.io/tags/txt/</link><description>Recent content in txt on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Mon, 29 Mar 2021 11:30:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/tags/txt/index.xml" rel="self" type="application/rss+xml"/><item><title>TXT lookup using the trust-dns-resolver Crate</title><link>https://bas-man.github.io/post/rust-trust-dns-resolver-txt-lookup/</link><pubDate>Mon, 29 Mar 2021 11:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust-trust-dns-resolver-txt-lookup/</guid><description>
&lt;p>This is the third article on using the &lt;strong>trust-dns-resolver&lt;/strong> crate&lt;br>
&lt;strong>Warning: This code is not intended to be used in production. You should review and adjust to your own needs.&lt;/strong>&lt;/p>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>First we will need to create our development environment.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>cargo new trust-dns-resolver &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="nv">$_&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will give us our standard rust directly structure. We need to add our crate to the &lt;code>Cargo.toml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>-snip-
&lt;span class="ln">2&lt;/span>&lt;span class="o">[&lt;/span>dependencies&lt;span class="o">]&lt;/span>
&lt;span class="ln">3&lt;/span>trust-dns-resolver &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0.20.1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next edit the &lt;code>src/main.rs&lt;/code> as follows.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/Bas-Man/eb35052052066903ec9ffe9eac57a55b.js">&lt;/script>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>cargo run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This outputs the following&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>TXT Record 1:
&lt;span class="ln">2&lt;/span>globalsign-smime-dv&lt;span class="o">=&lt;/span>CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8&lt;span class="o">=&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>TXT Record 2:
&lt;span class="ln">5&lt;/span>&lt;span class="nv">v&lt;/span>&lt;span class="o">=&lt;/span>spf1 &lt;span class="nv">redirect&lt;/span>&lt;span class="o">=&lt;/span>_spf.google.com
&lt;span class="ln">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="explaining-the-code">Explaining the code&lt;/h3>
&lt;p>Documentation for the TXT RData can be found &lt;a href="https://docs.rs/trust-dns-proto/0.20.1/trust_dns_proto/rr/rdata/txt/struct.TXT.html">here&lt;/a>&lt;br>
Let's take a look at what we are doing here.&lt;br>
Like the previous examples we create a resolver which will do the work of doing the DNS lookups.&lt;br>
Next we use the resolver to call &lt;code>txt_lookup()&lt;/code> and store the result into &lt;code>txt_response&lt;/code>&lt;br>
&lt;code>txt_response&lt;/code> will contain either and &lt;code>TxtLookup&lt;/code> or an &lt;code>Err&lt;/code>. For this reason we need to handle these two cases. As before I am passing a reference to the &lt;code>display_txt()&lt;/code> function.&lt;br>
Within &lt;code>display_txt&lt;/code> I use &lt;code>match&lt;/code> to handle my two cases.&lt;br>
In the case of &lt;code>Err&lt;/code>. I do nothing and just report there were no TXT records.&lt;br>
In the case of &lt;code>TxtLookup&lt;/code>, I will need to do some more processing.
I simply make an &lt;code>iter()&lt;/code> out of &lt;code>txt_response&lt;/code> and loop over it and call &lt;code>to_string()&lt;/code> on each record in the &lt;code>iter()&lt;/code>.&lt;/p>
&lt;p>I went down a rabbit hole for a while because I incorrectly thought I had to call &lt;code>txt_data()&lt;/code> which returns a &lt;code>Box&amp;lt;[u8]&lt;/code>, a smart pointer.&lt;/p>
&lt;p>I hope you find this interesting and useful.&lt;/p>
&lt;p>P.S: I might revisit this when I look at using regular expressions.&lt;/p></description></item></channel></rss>