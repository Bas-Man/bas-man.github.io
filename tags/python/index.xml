<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Bas-Man's Musings</title><link>https://bas-man.github.io/tags/python/</link><description>Recent content in Python on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Wed, 03 Feb 2021 09:00:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Google API Gmail LINE Notifications Part 4</title><link>https://bas-man.github.io/post/google-api-gmail-notifications-4/</link><pubDate>Wed, 03 Feb 2021 09:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api-gmail-notifications-4/</guid><description>
&lt;p>Part 4 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Gmail Python Line Bot&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-1/">1. Installation &amp;amp; First Run&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-2/">2. Labels&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-3/">3. Getting the Emails&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-4/">4. Processing Email Contents&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>Hi. Back again for another instalment.&lt;/p>
&lt;p>Today I will be working through accessing parts of an email. In part 3 we got to the stage where I had created an &lt;code>email.message.EmailMessage&lt;/code> object. You may not believe that is ready to use. Since if you played with it you might have found that it still contained a lot of non-ascii encoded characters, but thats ok. Once we start using the member methods provided by a &lt;code>email.message.EmailMessage&lt;/code> object. Things will be clear.&lt;/p>
&lt;p>So a quick review:&lt;br>
We did our search, got our message ids, boiled it down to just the message ids minus the threadIds&lt;/p>
&lt;p>We then used &lt;code>get_message(service, msg_id)&lt;/code> to return an &lt;code>email.message.EmailMessage&lt;/code> object.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">single_email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">some_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you print this with &lt;code>print(single_email)&lt;/code> you will get the string representation of the entire email. If it is not in ascii you might see subject line that looks like this.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>Subject: &lt;span class="o">=&lt;/span>?ISO-2022-JP?B?GyRCRn5CYDw8Pn//yROJCpDTiRpJDsbKEI&lt;span class="o">=&lt;/span>?&lt;span class="o">=&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And have an email body which is just as confusing. But thats ok. We will use the methods provided by &lt;code>email.message.EmailMessage&lt;/code> to get these string returned in a readable form.&lt;/p>
&lt;p>Here is a list of some the methods we can use:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>single_email.add_alternative&lt;span class="o">()&lt;/span> single_email.get_params&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 2&lt;/span>single_email.add_attachment&lt;span class="o">()&lt;/span> single_email.get_payload&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 3&lt;/span>single_email.add_header&lt;span class="o">()&lt;/span> single_email.get_unixfrom&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 4&lt;/span>single_email.add_related&lt;span class="o">()&lt;/span> single_email.is_attachment&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 5&lt;/span>single_email.as_bytes&lt;span class="o">()&lt;/span> single_email.is_multipart&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 6&lt;/span>single_email.as_string&lt;span class="o">()&lt;/span> single_email.items&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 7&lt;/span>single_email.attach&lt;span class="o">()&lt;/span> single_email.iter_attachments&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 8&lt;/span>single_email.clear&lt;span class="o">()&lt;/span> single_email.iter_parts&lt;span class="o">()&lt;/span>
&lt;span class="ln"> 9&lt;/span>single_email.clear_content&lt;span class="o">()&lt;/span> single_email.keys&lt;span class="o">()&lt;/span>
&lt;span class="ln">10&lt;/span>single_email.defects single_email.make_alternative&lt;span class="o">()&lt;/span>
&lt;span class="ln">11&lt;/span>single_email.del_param&lt;span class="o">()&lt;/span> single_email.make_mixed&lt;span class="o">()&lt;/span>
&lt;span class="ln">12&lt;/span>single_email.epilogue single_email.make_related&lt;span class="o">()&lt;/span>
&lt;span class="ln">13&lt;/span>...
&lt;span class="ln">14&lt;/span>...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Headers can simply be accessed using &lt;code>single_email.get('headername')&lt;/code>&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">single_email&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">subject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">single_email&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;subject&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To check if an email is multipart; &lt;code>single_email.is_multipart()&lt;/code> will return a &lt;code>True&lt;/code> or &lt;code>False&lt;/code>&lt;br>
There are lots of methods to use to deconstruct an email. Fortunately for me. The emails I am dealing with are system generated and also very simple plain text non-multipart.&lt;/p>
&lt;p>Let's look at the subject of the email.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>Subject: &lt;span class="o">=&lt;/span>?ISO-2022-JP?B?GyRCRn5CYDw8Pn//yROJCpDTiRpJDsbKEI&lt;span class="o">=&lt;/span>?&lt;span class="o">=&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using the &lt;code>get&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">sub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">single_email&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;subject&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subject&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I get:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>入退室情報のお知らせ
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that I didn't actually need to know the character encoding. This was due to the way the parser object was setup using the arguments &lt;code>policy=policy.default&lt;/code> in the previous post.&lt;/p>
&lt;p>So as you can see, getting the header details is pretty easy. How about getting the body of the email? Again this is pretty simple when dealing with a single non-multipart email. I will simply use &lt;code>get_content()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">single_email&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_content&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>Redacted Redacted
&lt;span class="ln">2&lt;/span>�=J_] �@O5 �12K^0[0=^ 様の入退室情報をお知らせします。
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>【セーフティメール情報】
&lt;span class="ln">5&lt;/span>2021-02-01 19:08:26 に退室しました。
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>※なお、このメールに返信することはできませんのでご注意ください
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you are dealing with an email that is multipart, you will need to use the &lt;code>walk()&lt;/code> method. Combined with &lt;code>get_content_maintype()&lt;/code> and &lt;code>get_content_subtype()&lt;/code> to identify or find things like plain text and HTML or binary attachments.
There already exists some good Python documentation for this. So I won't go into it here.&lt;/p>
&lt;p>That's it for this article. Next I will give some information on regex for dealing with Japanese. But you can also take a look at this &lt;a href="https://bas-man.github.io/post/regex-double-byte-python3/">earlier post&lt;/a>.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 3</title><link>https://bas-man.github.io/post/google-api-gmail-notifications-3/</link><pubDate>Mon, 01 Feb 2021 23:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api-gmail-notifications-3/</guid><description>
&lt;p>Part 3 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Gmail Python Line Bot&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-1/">1. Installation &amp;amp; First Run&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-2/">2. Labels&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-3/">3. Getting the Emails&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-4/">4. Processing Email Contents&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>Hi. In this article I will be working through how to get a list of message_ids and to get the email associated with an id.&lt;/p>
&lt;p>I have done quite a bit of work with processing email in a past life. Working in Perl. I worked on a project which I am pretty sure predates mailchimp. So I have a solid understanding of Email and its standards.&lt;/p>
&lt;p>But this is my first venture into processing emails with Python. So I did some research and found a couple of guides. Neither were particularly great. But they at least pointed me in the right direction. This will be a distilled version of what I gleamed.
If you want to see one of the sources, then I refer you to &lt;a href="https://www.youtube.com/watch?v=vgk7Yio-GQw&amp;amp;t=108s">this&lt;/a>. The flow is not the best. But he gets there.&lt;/p>
&lt;p>For my purposes, I need to get a list of emails with the following conditions:&lt;/p>
&lt;ul>
&lt;li>Arrived within the last 5 minutes (not possible so need a label)&lt;/li>
&lt;li>Already labeled using Gmail filters.&lt;/li>
&lt;/ul>
&lt;p>I generally label key email with special labels. In my case I have three emails which already have labels applied when they come into my email account, so I will create a search using these labels.&lt;/p>
&lt;p>This means creating a Gmail search string which does the following.&lt;/p>
&lt;ol>
&lt;li>Gets all emails that have the labels I am interested in. Emails only need to have one of these labels.&lt;/li>
&lt;li>The email must be only 1 day old. (Can not limit search to newer emails)&lt;/li>
&lt;li>exclude email that have a label that will be added after processing. (Prevent re-processing) Processing once every 5 minutes.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>(label:labela OR label:labelb OR label:labelc)
&lt;ul>
&lt;li>This gives us all emails that have any of these labels attached.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>newer_than:1d
&lt;ul>
&lt;li>Limit to email that are only 24 hours older or newer.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>-label:processed
&lt;ul>
&lt;li>exclude email with this label&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The final search string looks like this:&lt;br>
&lt;code>((label:labela OR label:labelc OR label:labelc) AND -label:processed) AND newer_than:1d&lt;/code>&lt;/p>
&lt;p>So we want to add this as a CONSTANT that can be referred to later.&lt;br>
&lt;code>SEARCH_STRING = ((label:labela OR label:labelc OR label:labelc) AND -label:processed) AND newer_than:1d&lt;/code>&lt;/p>
&lt;p>How do I get a list of emails that match this search condition?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_message_ids&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">search_string&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">search&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">messages&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">search_string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">except&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">errors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">HttpError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">search&lt;/span>
&lt;span class="ln">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This returns a dictionary which contains two keys.&lt;/p>
&lt;ol>
&lt;li>messages -&amp;gt; List of dict() with two keys: 'id' and 'threadId'&lt;/li>
&lt;li>resultSizeEstimate -&amp;gt; number of messages in the response&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="s1">&amp;#39;messages&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;1775d10a91ba4249&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;threadId&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;threadId&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="s1">&amp;#39;resultSizeEstimate&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>id&lt;/code> is the idvidual email &lt;code>id&lt;/code> and &lt;code>threadId&lt;/code> is the email thread the &lt;code>id&lt;/code> belongs to.&lt;/p>
&lt;p>Calling this using:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">message_ids&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_message_ids&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SEARCH_STRING&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember that &lt;code>service&lt;/code> comes from &lt;code>service = get_service()&lt;/code>&lt;/p>
&lt;p>We can use &lt;code>resultSizeEstimate&lt;/code> to determine if there are no matching messages.
Keeping in mind that any integer greater than zero is considered &lt;code>True&lt;/code>, we can make this function which will return &lt;code>True&lt;/code> or &lt;code>False&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">found_messages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message_ids&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message_ids&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;resultSizeEstimate&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will return &lt;code>False&lt;/code> when &lt;code>resultSizeEstimate&lt;/code> equals zero, or &lt;code>True&lt;/code> if it is greater than zero.&lt;/p>
&lt;p>I am not interested in threads. So I am going to get just a list of &lt;code>id&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_only_message_ids&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message_ids&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">ids&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">anId&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">message_ids&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;messages&amp;#39;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">ids&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">anId&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">ids&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here I am accessing the &lt;code>messages&lt;/code> dictionary to just get each message's &lt;code>id&lt;/code>
This will give me something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="s1">&amp;#39;1775d10a91ba4249&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>These are the individual ids for each email that were found with my search string.&lt;/p>
&lt;p>At some point I will need to loop through these ids to process each message. But these are just the ids. We need to get the actual email referenced using the ids we have.&lt;/p>
&lt;p>Let's get an actual email.&lt;br>
At this point we also need to add some more modules to our script.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">base64&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">email&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">email&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">parser&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">email&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">policy&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">messages&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">msg_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">format&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;raw&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">msg_in_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urlsafe_b64decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;raw&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ASCII&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">email_tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message_from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg_in_bytes&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">policy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">emailParser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">resulting_email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">emailParser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parsestr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">email_tmp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">as_string&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">resulting_email&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What are we doing here?&lt;/p>
&lt;ol>
&lt;li>Getting the message, a dictionary object.&lt;br>
This gives us:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">{&lt;/span> &lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;1775d10a91ba4249&amp;#39;&lt;/span>,
&lt;span class="ln"> 2&lt;/span> &lt;span class="s1">&amp;#39;threadId&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;1775c1ffe59cda8f&amp;#39;&lt;/span>,
&lt;span class="ln"> 3&lt;/span> &lt;span class="s1">&amp;#39;labelIds&amp;#39;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="s1">&amp;#39;Label_18&amp;#39;&lt;/span>,
&lt;span class="ln"> 5&lt;/span> &lt;span class="s1">&amp;#39;CATEGORY_PERSONAL&amp;#39;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">]&lt;/span>,
&lt;span class="ln"> 7&lt;/span> &lt;span class="s1">&amp;#39;snippet&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;REDACTED REDACTED 様の入退室情報をお知らせします。 【セーフティメール情報】 2021-02-01 19:08:26 に退室しました。 ※なお、このメールに返信することはできませんのでご注意ください。&amp;#39;&lt;/span>,
&lt;span class="ln"> 8&lt;/span> &lt;span class="s1">&amp;#39;sizeEstimate&amp;#39;&lt;/span>: 3448,
&lt;span class="ln"> 9&lt;/span> &lt;span class="s1">&amp;#39;raw&amp;#39;&lt;/span>:
&lt;span class="ln">10&lt;/span> &lt;span class="s1">&amp;#39;RGVsaXZlcmVkLVRvOiBiYXNwYW5uQGdtYWlsLmNvbQ0KUmVjZWl2ZWQ6IGJ5IDIwMDI6YWRm
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="s1"> Ojk1MDY6MDowOjA6MDowIHdpdGggU01UUCBpZCA2Y3NwMzg1MzYyd3JzOw0KICAgICAgICBNb2
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s1"> ....snip...
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s1"> 6MDg6MjYgGyRCJEtCYDw8JDckXiQ3JD8hIxsoQg0KDQobJEIiKCRKJCohIiQzJE4lYSE8JWskS
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="s1"> 0pWPy4kOSRrJDMkSCRPJEckLSReJDskcyROJEckNENtMFUkLyRAJDUkJCEjGyhCDQoNCg==&amp;#39;&lt;/span>,
&lt;span class="ln">15&lt;/span> &lt;span class="s1">&amp;#39;historyId&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;3086929&amp;#39;&lt;/span>,
&lt;span class="ln">16&lt;/span> &lt;span class="s1">&amp;#39;internalDate&amp;#39;&lt;/span>: &lt;span class="s1">&amp;#39;1612174106000&amp;#39;&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not so useful, but we could probably do something with the &lt;code>snippet&lt;/code>, but I have read this is not provided with the api with all languages. Your milage may differ.&lt;/p>
&lt;ol start="2">
&lt;li>Then access the &lt;code>raw&lt;/code> key which is base64 encoded. This key gives us the byte string format of the entire email including headers.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>b&lt;span class="s1">&amp;#39;Delivered-To: redact@example.com\r\nReceived: by 2002:adf:9506:0:0:0:0:0
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="s1"> with SMTP id 6csp385362wrs;\r\n Mon, 1 Feb 2021 02:08:29 -0800 (PST)
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s1"> \r\nX-Googl..snip....
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="s1"> \r\n\r\n\x1b$B&amp;#34;($J$*!&amp;#34;$3$N%a!&amp;lt;%k$KJV?.$9$k$3$H$O$G$-$^$;$s$N$G$4Cm0U$/$@$5$$!#\x1b(B
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="s1"> \r\n\r\n&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a little more useful, but again in this case it's been encoded due to the character set that was used in the email.&lt;/p>
&lt;ol start="3">
&lt;li>Create a Email Parser object to process the byte string email&lt;/li>
&lt;li>Read this byte string and create an &lt;code>email.message.EmailMessage&lt;/code> object.&lt;/li>
&lt;/ol>
&lt;p>The last two steps get us closer. The email is still character encoded. But it's ready for us to use in the next step.&lt;/p>
&lt;p>&lt;em>Comment&lt;/em>&lt;br>
It is my understanding that email was developed to only support the ascii character set. As a result, encodings have been added to support other languages. This means that a lot of email are not really human readable by default.&lt;br>
If you are interested you can take a peek at &lt;a href="https://tools.ietf.org/html/rfc2045">RFC2045&lt;/a>&lt;/p>
&lt;p>Note:&lt;br>
I am using:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">email_tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message_from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg_in_bytes&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">policy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">emailParser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">policy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>policy.default&lt;/code> is relatively new. Processing email this way means, I don't have to check the encoding of the contents. The parser will handle that for me. I can skip checking if the string is &lt;code>UTF-8&lt;/code> or &lt;code>ISO-2022-JP&lt;/code>. I am doing this because the emails I am dealing with are in Japanese as I live in Tokyo. If you are dealing with only english and emails that are only in ascii encoded, you can simplify the get_message() function.&lt;/p>
&lt;p>In the next section I will look at processing a single email to get the information I am interested in.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 2</title><link>https://bas-man.github.io/post/google-api-gmail-notifications-2/</link><pubDate>Mon, 01 Feb 2021 14:15:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api-gmail-notifications-2/</guid><description>
&lt;p>Part 2 in a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Gmail Python Line Bot&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-1/">1. Installation &amp;amp; First Run&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-2/">2. Labels&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-3/">3. Getting the Emails&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-4/">4. Processing Email Contents&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>Hi again. If you followed the guide I referenced in the previous post. &lt;a href="https://medium.com/better-programming/a-beginners-guide-to-the-google-gmail-api-and-its-documentation-c73495deff08">A Beginner’s Guide to the Gmail API and Its Documentation&lt;/a>. The next section will be somewhat familiar.&lt;/p>
&lt;p>In this section we will be accessing the labels used within Gmail, creating a new label, and also getting the new label's &lt;strong>id&lt;/strong>. The id is critical because the google API does not use the label's name. It is merely the name displayed in the user interface.&lt;/p>
&lt;p>I am going to structure some of the code also at this point.&lt;/p>
&lt;p>This will be the new starting code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">pickle&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">os.path&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">googleapiclient.discovery&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">build&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">google_auth_oauthlib.flow&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">InstalledAppFlow&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">google.auth.transport.requests&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Request&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># If modifying these scopes, delete the file token.pickle.&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="n">SCOPES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;https://www.googleapis.com/auth/gmail.modify&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s1">&amp;#39;https://www.googleapis.com/auth/gmail.labels&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_service&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Shows basic usage of the Gmail API.
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s2"> Lists the user&amp;#39;s Gmail labels.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1"># The file token.pickle stores the user&amp;#39;s access and refresh tokens, and is&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1"># created automatically when the authorization flow completes for the first&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1"># time.&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pickle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1"># If there are no (valid) credentials available, let the user log in.&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valid&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">expired&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">refresh_token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">refresh&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">flow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">InstalledAppFlow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_client_secrets_file&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="s1">&amp;#39;credentials.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SCOPES&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">flow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run_local_server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="c1"># Save the credentials for the next run&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;wb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="n">pickle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">creds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="c1"># Another option to ignore google cache logging issue&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="c1"># service = build(&amp;#39;gmail&amp;#39;, &amp;#39;v1&amp;#39;, credentials=creds, cache_discovery=False)&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gmail&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;v1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">credentials&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">creds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">service&lt;/span>
&lt;span class="ln">36&lt;/span>
&lt;span class="ln">37&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="n">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_service&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">40&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">43&lt;/span>
&lt;span class="ln">44&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have moved the code that will connect to the API into its own function call &lt;em>get_service&lt;/em> which returns an object we can use to access the API.
The keen reader my have noticed that I have updated the SCOPES. I will be modifying emails in a later post in the series and we also need access to the labels to be able to read and modify them.&lt;/p>
&lt;p>The next set of functions will be added to the file just above: &lt;strong>def main():&lt;/strong>&lt;/p>
&lt;p>First may want to be able to get a list of all the labels we have in our Gmail account. This can be done using this code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_labels&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">list_of_labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">list_of_labels&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;labels&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>get_labels return a list of json objects. Which are just dictionaries in python.&lt;/p>
&lt;p>Next we may want to create a new label to use with Gmail. This can be done with following code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">define_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mlv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;show&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">llv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;labelShow&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;messageListVisibility&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mlv&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;labelListVisibility&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">llv&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">label&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the simplest json form that will create a valid label in Gmail.
If we call this function:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">define_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>we get the following json string:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>{
&lt;span class="ln">2&lt;/span> &amp;#39;messageListVisibility&amp;#39;: &amp;#39;show&amp;#39;,
&lt;span class="ln">3&lt;/span> &amp;#39;labelListVisibility&amp;#39;: &amp;#39;labelShow&amp;#39;,
&lt;span class="ln">4&lt;/span> &amp;#39;name&amp;#39;: &amp;#39;test&amp;#39;
&lt;span class="ln">5&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After creating this object we want to actually add it to Gmail. We can do that using the following code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">add_label_to_gmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">created_label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">created_label&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What add_label_to_gmail() does is call the API with a body of json containing the information to create a new label within Gmail. If there is a problem, for example, trying to add a new label when one with the name already exists; we will get an exception.&lt;br>
If everything goes well we will get a new json containing the original json we created, &lt;em>but&lt;/em> it will also now contain the label's &lt;em>id&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>{
&lt;span class="ln">2&lt;/span> &amp;#39;id&amp;#39;: &amp;#39;Label_30&amp;#39;,
&lt;span class="ln">3&lt;/span> &amp;#39;name&amp;#39;: &amp;#39;test&amp;#39;,
&lt;span class="ln">4&lt;/span> &amp;#39;messageListVisibility&amp;#39;: &amp;#39;show&amp;#39;,
&lt;span class="ln">5&lt;/span> &amp;#39;labelListVisibility&amp;#39;: &amp;#39;labelShow&amp;#39;
&lt;span class="ln">6&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can now get that new &lt;em>id&lt;/em> using the next function&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">get_new_label_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new_label&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">new_label&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This simply returns label as a string.&lt;/p>
&lt;p>In practice this means making the following set of calls.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="n">new_label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">define_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">new_label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add_label_to_gmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_label&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">new_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_new_label_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new_label&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But why or how do we use this new &lt;em>id&lt;/em> once its been created and added to Gmail?&lt;br>
As mentioned at in the first article. I am working on making a system that queries and sends notifications based on some emails. I have a need to query Gmail fairly frequently during certain times of the day, say once every 5 minutes. Gmail's search options only allows me to limit my search conditions to emails that are newer_than:1day. That means, I will see the same emails repeatedly triggering multiple notifications.&lt;/p>
&lt;p>The fix? Add a label when a message is processed and then use &lt;em>-label:labelname&lt;/em> in the search string. Meaning that once an email is processed. It won't get processed a second time.&lt;/p>
&lt;p>How do you add a label to a message?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">add_label_to_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">label_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">messages&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">modify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nb">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">msg_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;removeLabelIds&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="s1">&amp;#39;addLabelIds&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">label_id&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1"># Do something here. print or log&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This takes the service, a msg_id, and the label_id we got after creating the new label.&lt;/p>
&lt;p>Where does the msg_id come from? That is a story for the next post in our series.&lt;/p></description></item><item><title>Google API Gmail LINE Notifications Part 1</title><link>https://bas-man.github.io/post/google-api-gmail-notifications-1/</link><pubDate>Mon, 01 Feb 2021 14:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/google-api-gmail-notifications-1/</guid><description>
&lt;p>This will be a series of articles on implementing a notification system using Gmail and &lt;a href="https://notify-bot.line.me/doc/en/">Line Bot&lt;/a>&lt;br>
The goal here is to be able to query gmail for a select set of emails. Process them and then send a notification. This could be altered to work with a Bot of some other service.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Gmail Python Line Bot&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-1/">1. Installation &amp;amp; First Run&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-2/">2. Labels&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-3/">3. Getting the Emails&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bas-man.github.io/post/google-api-gmail-notifications-4/">4. Processing Email Contents&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>So let's get started. I am going to take a short cut here because I believe that if there is already a good guide; then you shouldn't rehash what has been done before. Unless you are adding to it. So I would suggest following one of the guides below and then move on to step two when you are ready.&lt;/p>
&lt;p>Getting started with Python and Gmail API. Head over to
&lt;a href="https://developers.google.com/gmail/api/quickstart/python">Python Quick Start&lt;/a> or my prefered option &lt;a href="https://medium.com/better-programming/a-beginners-guide-to-the-google-gmail-api-and-its-documentation-c73495deff08">A Beginner’s Guide to the Gmail API and Its Documentation&lt;/a> which I found to be well presented and informative.&lt;/p>
&lt;p>It boils down to, enabling the API, installing the required modules, and copying the provided code. Don't forget to download the &lt;em>credentials file&lt;/em> you will be given by Google.&lt;/p>
&lt;p>&lt;em>Note: I am going to be using python 3&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add the folowing code to a file, lets just call it &lt;em>gmail.py&lt;/em>&lt;/p>
&lt;p>&lt;em>Note: I have removed the following&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>from __future__ import print_function
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please keep this if you are using Python 2&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">pickle&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">os.path&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">googleapiclient.discovery&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">build&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">google_auth_oauthlib.flow&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">InstalledAppFlow&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">google.auth.transport.requests&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Request&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># If modifying these scopes, delete the file token.pickle.&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="n">SCOPES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;https://www.googleapis.com/auth/gmail.readonly&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Shows basic usage of the Gmail API.
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="s2"> Lists the user&amp;#39;s Gmail labels.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1"># The file token.pickle stores the user&amp;#39;s access and refresh tokens, and is&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1"># created automatically when the authorization flow completes for the first&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="c1"># time.&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;rb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pickle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1"># If there are no (valid) credentials available, let the user log in.&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valid&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">expired&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">refresh_token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">refresh&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">flow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">InstalledAppFlow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_client_secrets_file&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="s1">&amp;#39;credentials.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SCOPES&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">creds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">flow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run_local_server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="c1"># Save the credentials for the next run&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;token.pickle&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;wb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="n">pickle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">creds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="n">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gmail&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;v1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">credentials&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">creds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">34&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="c1"># Call the Gmail API&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;me&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;labels&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;span class="ln">38&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;No labels found.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Labels:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">label&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">45&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>A note on the sign in process. This may not work if you are using safari, so use Brave or some other browser if needed. You can copy and paste the link generated in your terminal for this.&lt;/em>&lt;/p>
&lt;p>When you are done. You can move on to the next article in the series.&lt;/p></description></item><item><title>Working with double-byte regex expressions with Python3</title><link>https://bas-man.github.io/post/regex-double-byte-python3/</link><pubDate>Tue, 05 Jan 2021 12:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/regex-double-byte-python3/</guid><description>
&lt;p>As part of my project &lt;a href="https://bas-man.github.io/post/self-hosted-zapier-alternative/">Self Hosted Zapier Alternative&lt;/a>; I am having to deal with doing regex searches against the three Japanese written forms, Kanji, Hiragana and Katakana.&lt;/p>
&lt;p>Fortunately this is a common problem. So I have found some references for this.
Also one of my favourite tools for developing regex expressions, &lt;a href="https://regex101.com">Regex101&lt;/a>, also offers support in this area.&lt;/p>
&lt;p>I found this useful &lt;a href="https://github.com">Github&lt;/a> Gist.&lt;br>
&lt;strong>note:&lt;/strong>&lt;br>
You should also check the gist directly as there are some follow up comments and
additions. See &lt;a href="https://gist.github.com/terrancesnyder/1345094">here&lt;/a>&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/terrancesnyder/1345094.js">&lt;/script>
&lt;p>Using Regex101 I was able to come up with the following expression.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-Python3" data-lang="Python3">&lt;span class="ln">1&lt;/span>&lt;span class="sa">r&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="err">「&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">busname&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">一&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">龯&lt;/span>&lt;span class="p">]&lt;/span>\&lt;span class="n">d&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">})&lt;/span>\&lt;span class="n">s&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">destination&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">一&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">龯&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">行き&lt;/span>&lt;span class="err">・&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">boardedat&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">一&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">龯&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">」&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will successfully match a string such as:&lt;br>
&lt;code>「渋11 渋谷駅行き・駒沢大学駅前」でタッチしました。&lt;/code>
 &lt;br>
Resulting in the following three groups.&lt;br>
&lt;em>busname&lt;/em> = 渋11&lt;br>
&lt;em>destination&lt;/em> = 渋谷駅&lt;br>
&lt;em>boardedat&lt;/em> = 駒沢大学駅&lt;/p>
&lt;p>If you are working in PHP you can also use the following:&lt;br>
&lt;code>\p{Han}&lt;/code> (Using Chinese to match Kanji)&lt;br>
&lt;code>\p{Hiragana}&lt;/code>&lt;br>
&lt;code>\p{Katakana}&lt;/code>&lt;/p>
&lt;p>You can also checkout my Regex Experiments:&lt;br>
&lt;a href="https://regex101.com/r/YkltWH/1">v1&lt;/a> PHP&lt;br>
&lt;a href="https://regex101.com/r/YkltWH/2">v2&lt;/a> Python3&lt;/p></description></item><item><title>Project: Self Hosted Zapier Alternative</title><link>https://bas-man.github.io/post/self-hosted-zapier-alternative/</link><pubDate>Sat, 02 Jan 2021 23:00:39 +0900</pubDate><guid>https://bas-man.github.io/post/self-hosted-zapier-alternative/</guid><description>
&lt;p>I am currently in the process of working out how I might replace some of my Zapier services. Why would I want to do this?&lt;/p>
&lt;ol>
&lt;li>I use the free tier. (The process only runs once every 15 minutes. It used to be once every 5 mins.) Which means it has become a bit slow in sending the notifications.&lt;/li>
&lt;li>I want to learn how to use &lt;a href="https://www.docker.com">Docker&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Once I get a bit further along I will hopefully publish the python code to &lt;a href="https://github.com">GitHub&lt;/a> and document some of the issues and successes as I move along. Check the &lt;a href="https://bas-man.github.io/projects/">Projects page&lt;/a> section if you are interested.&lt;/p></description></item><item><title>Send a notification through LINE with AppDaemon with Home Assistant</title><link>https://bas-man.github.io/post/home-assistant-adddaemon-line-notification/</link><pubDate>Thu, 17 Dec 2020 23:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/home-assistant-adddaemon-line-notification/</guid><description>
&lt;h1 id="the-challenge">The challenge&lt;/h1>
&lt;p>Living in Japan we generally default to using &lt;a href="https://mobile.line.me">LINE&lt;/a> for our messaging needs. At the time of this writing there is no integration for LINE within &lt;a href="https://www.home-assistant.io">Home Assistant&lt;/a>. Currently I use &lt;a href="https://pushover.net">PushOver&lt;/a> for some of my Home Assistant notifications. I also use &lt;a href="https://zapier.com">Zapier&lt;/a> with email to trigger notifications to my family LINE group. You can see how I did this &lt;a href="https://dev.to/basman/integrating-line-message-and-zapier-58e6">here&lt;/a> and &lt;a href="https://gmailzapierlinenotify.readthedocs.io/en/latest/">here&lt;/a>.&lt;/p>
&lt;p>I also track some &lt;a href="https://www.thetileapp.com/">Tile&lt;/a> devices to know when family members are home. And of course I want to keep an eye on the younger members. Know when they leave home, get home and such. I want my wife and myself to get these notifications.&lt;/p>
&lt;p>Since we already have a LINE group for other notifications. I thought it would be good to just add these to the existing group, and avoid paying for, and installing additional software on to my wife's phone.&lt;/p>
&lt;p>I have previously used &lt;a href="https://pypi.org/project/line_notify/">line_notify&lt;/a> from &lt;a href="https://pypi.org/">pypyi.org&lt;/a> to send some notifications using Python.&lt;/p>
&lt;p>But getting this Python module directly connected with Home Assistant is not possible.&lt;/p>
&lt;h1 id="the-solution">The solution&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://appdaemon.readthedocs.io/en/latest/">AppDaemon&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pypi.org/project/line_notify/">line_notify&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Following some research I found AppDaemon might meet my needs. AppDaemon is a sandboxed python environment that can be integrated with Home Assistant and has access to entity state and can monitor events within Home Assistant. It also allows you to import external Python modules. Yay. I can use line_notify.&lt;/p>
&lt;h2 id="how-i-got-it-done">How I got it done&lt;/h2>
&lt;ol>
&lt;li>Install AppDaemon. This will vary based on your setup. There is plenty of documentation on this.&lt;/li>
&lt;li>Add line_notify to the Python modules list in AppDaemon's configuration pane.
&lt;figure>
&lt;img src="https://bas-man.github.io/images/PythonPackages.png"/>
&lt;/figure>
&lt;/li>
&lt;li>Generate your Line Bot Token. See my previous &lt;a href="https://dev.to/basman/integrating-line-message-and-zapier-58e6">article&lt;/a> or &lt;a href="https://gmailzapierlinenotify.readthedocs.io/en/latest/">Read the Docs&lt;/a>. Remember to store it somewhere safe.&lt;/li>
&lt;li>Create your new AppDaemon app.&lt;/li>
&lt;/ol>
&lt;h3 id="creating-the-app">Creating the App&lt;/h3>
&lt;p>The coding will be done in your Home Assistant's &lt;strong>appdaemon&lt;/strong> folder located under your &lt;strong>config&lt;/strong> folder. If you need a visual guide. I would direct you to the YouTube link below.&lt;/p>
&lt;p>First let's make sure you have your timezone and location information setup correctly. Locate and open your &lt;strong>appdaemon.yaml&lt;/strong> file. In my case my timezone is &lt;em>Asia/Tokyo&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">secrets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/config/secrets.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">appdaemon&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">latitude&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">XX&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">longitude&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">YY&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">elevation&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">time_zone&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Asia/Tokyo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">plugins&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">HASS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hass&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ha_url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://192.168.X.X:8123&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>!&lt;span class="l">secret appdaemon&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">app_init_delay&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">20&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:5050&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">admin&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">api&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">hadashboard&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong>
Latitude and Longitude could be referenced from your &lt;strong>secrets.yaml&lt;/strong> file and actually, they should be.
Having an incorrect timezone setting may result in unexpected behaviour.&lt;/p>
&lt;p>Next open &lt;strong>apps.yaml&lt;/strong> in the &lt;strong>apps&lt;/strong> folder.
Assuming this a fresh setup, there should just be the hello_world app. So we will be adding a new app below it.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">hello_world&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">module&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">class&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HelloWorld&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">line_notify&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">module&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">line_message&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">class&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">LineMessage&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>line_notify -&amp;gt; App Name&lt;/li>
&lt;li>line_message -&amp;gt; module name. file will be named &lt;em>line_message.py&lt;/em>&lt;/li>
&lt;li>LineMessage -&amp;gt; Class name used within &lt;em>line_message.py&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>Next copy hello.py to make a new file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>cp hello.py line_message.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Open the new file and add the following code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">appdaemon.plugins.hass.hassapi&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">hass&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">from&lt;/span> &lt;span class="nn">line_notify&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">LineNotify&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">LINE_TOKEN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;LINE BOT TOKEN GENERATED PREVIOUSLY&amp;#34;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">LineMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Hass&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Starting Line Message Service.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen_state&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">person1_home_send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;device_tracker.person1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;home&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen_state&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">person1_away_send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;device_tracker.person1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;not_home&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">person1_home_send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attribute&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now_is_between&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;07:50:00&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;21:00:00&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Person1 has arrived Home.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">person1_away_send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attribute&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kwargs&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now_is_between&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;07:50:00&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;20:00:00&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Person1 has left Home.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">send_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;Sending message {message}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">notify&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LineNotify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LINE_TOKEN&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">notify&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Finished sending message&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="what-does-this-code-do">What does this code do?&lt;/h3>
&lt;ul>
&lt;li>Unfortunately the Token needs to be hardcoded. From my reading there is currently no way around this.&lt;/li>
&lt;li>initialize.
&lt;ul>
&lt;li>This method is &lt;strong>required&lt;/strong>. If is missing nothing will happen. In this case we are saying the following.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>When device_tracker.person1 changes to &lt;em>home&lt;/em> call the method named &lt;em>person1_home_send&lt;/em>&lt;/li>
&lt;li>When device_tracker.person1 changes to &lt;em>not_home&lt;/em> call the method named &lt;em>person1_away_send&lt;/em>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>person1_home_send
&lt;ul>
&lt;li>If this event takes place between 7:50am and 9pm call the &lt;em>send_message&lt;/em> method with the argument provided.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>person1_away_send
&lt;ul>
&lt;li>If this event takes place between 7:50am and 8pm call the &lt;em>send_message&lt;/em> method with the argument provided.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>send_message
&lt;ul>
&lt;li>This takes the message string as input. Creates the notify object needed to send the message to LINE and then sends it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>This completes the coding of the app. Go back to Home Assistant and restart the AppDaemon.&lt;/p>
&lt;p>This code can easily be expanded for more use cases.&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;ul>
&lt;li>YouTube: &lt;a href="https://www.youtube.com/watch?v=GVIS7GtqLpo">here&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://notify-bot.line.me/en/">Line Notify Bot&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://notify-bot.line.me/doc/en/">Line Notify Bot Documentation&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CI on Github for Python</title><link>https://bas-man.github.io/post/github-python-action/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/github-python-action/</guid><description>
&lt;p>So I finally thought it was time to start doing some continuous intergration testing as well as testing with multiple versions of Python.&lt;/p>
&lt;p>I had been looking at using things such as &lt;a href="https://circleci.com">CircleCI&lt;/a> or &lt;a href="https://travis-ci.org">Travis-ci&lt;/a>. But I finally decided I would try to use Github's workflow actions.&lt;/p>
&lt;p>I did some searching and found some guides. As part of that I evenutally came a cross &lt;a href="https://docs.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions">this link&lt;/a> on Github's own docs.&lt;/p>
&lt;p>Based on these examples. I started working on my own workflow. This is a very lightly modified version of one found on Github. So it's not at all original.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Python package&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">development ]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matrix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">python-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">3.5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3.6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3.7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3.8&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Set up Python ${{ matrix.python-version }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/setup-python@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">python-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ matrix.python-version }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Install dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="sd"> python -m pip install --upgrade pip
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="sd"> # Add modules required for testing.
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="sd"> pip install pytest pyscaffold==3.2.3 coverage pytest-cov
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="sd"> # Add modules required for functionality.
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="sd"> if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="sd"> pip install -e .&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Test with pytest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pytest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Basically this will test the module running under several virtual machines running the four versions of python listed. Note that I am not running the code through a linter at this stage. You can see examples of that in the Github guide.&lt;/p></description></item></channel></rss>