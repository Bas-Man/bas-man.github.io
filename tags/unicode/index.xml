<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unicode on Bas-Man's Musings</title><link>https://bas-man.github.io/tags/unicode/</link><description>Recent content in unicode on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Tue, 12 Jan 2021 16:00:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/tags/unicode/index.xml" rel="self" type="application/rss+xml"/><item><title>Generic Regex Match Function Multiple Groups</title><link>https://bas-man.github.io/post/generic-regex-match-function-multiple-groups/</link><pubDate>Tue, 12 Jan 2021 16:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/generic-regex-match-function-multiple-groups/</guid><description>
&lt;p>If you have read my previous posts; you might know I am currently working on a new project to move some services to a self-hosted solution. As part of this, I have been working on dealing with &lt;code>unicode&lt;/code> characters in regex.&lt;/p>
&lt;p>In relation to this I have found that I am writing the same function repeatedly. The only difference being the number matches being returned. So I decided we need to refactor this.&lt;/p>
&lt;p>Here is my solution&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python3" data-lang="python3">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">findMatches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">regex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="s2"> This is a generic matching function.
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="s2"> Warning! Your regex expression MUST use &amp;#39;Named Groups&amp;#39; -&amp;gt; (:P&amp;lt;name&amp;gt;) or
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="s2"> this function will return an empty dictionary
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="s2"> :param string: The text you are searching
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="s2"> :type string: str
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="s2"> :param regex: The regular expression string you are using to search
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="s2"> :type regex: str
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="s2"> :returns: A dictionary of named key/value pairs. The key value is derived &lt;/span>&lt;span class="se">\
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="se">&lt;/span>&lt;span class="s2"> from (:P&amp;lt;name&amp;gt;)
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="s2"> :returns: None is returned if No match is found.
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="s2"> :rtype: dict
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="s2"> :rtype: None
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">matcher&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">regex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">UNICODE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">match&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">matcher&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">matches&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">groupdict&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">matches&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">matches&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1"># No Matches&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It takes two arguments. The &lt;code>string&lt;/code> to be searched and the &lt;code>regex&lt;/code> to be used. I go through the basic process of making the &lt;code>re&lt;/code> object and do the match.
I then go over match objects dictionary and get the name of the keys. I use these keys to make a simple dictionary object storing the matching key, value pairs.&lt;/p>
&lt;p>No more writing the same basic function repeatedly.&lt;/p></description></item><item><title>Working with double-byte regex expressions with Python3</title><link>https://bas-man.github.io/post/regex-double-byte-python3/</link><pubDate>Tue, 05 Jan 2021 12:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/regex-double-byte-python3/</guid><description>
&lt;p>As part of my project &lt;a href="https://bas-man.github.io/post/self-hosted-zapier-alternative/">Self Hosted Zapier Alternative&lt;/a>; I am having to deal with doing regex searches against the three Japanese written forms, Kanji, Hiragana and Katakana.&lt;/p>
&lt;p>Fortunately this is a common problem. So I have found some references for this.
Also one of my favourite tools for developing regex expressions, &lt;a href="https://regex101.com">Regex101&lt;/a>, also offers support in this area.&lt;/p>
&lt;p>I found this useful &lt;a href="https://github.com">Github&lt;/a> Gist.&lt;br>
&lt;strong>note:&lt;/strong>&lt;br>
You should also check the gist directly as there are some follow up comments and
additions. See &lt;a href="https://gist.github.com/terrancesnyder/1345094">here&lt;/a>&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/terrancesnyder/1345094.js">&lt;/script>
&lt;p>Using Regex101 I was able to come up with the following expression.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-Python3" data-lang="Python3">&lt;span class="ln">1&lt;/span>&lt;span class="sa">r&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="err">「&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">busname&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">一&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">龯&lt;/span>&lt;span class="p">]&lt;/span>\&lt;span class="n">d&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">})&lt;/span>\&lt;span class="n">s&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">destination&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">一&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">龯&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">行き&lt;/span>&lt;span class="err">・&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">boardedat&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">一&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">龯&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">」&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will successfully match a string such as:&lt;br>
&lt;code>「渋11 渋谷駅行き・駒沢大学駅前」でタッチしました。&lt;/code>
 &lt;br>
Resulting in the following three groups.&lt;br>
&lt;em>busname&lt;/em> = 渋11&lt;br>
&lt;em>destination&lt;/em> = 渋谷駅&lt;br>
&lt;em>boardedat&lt;/em> = 駒沢大学駅&lt;/p>
&lt;p>If you are working in PHP you can also use the following:&lt;br>
&lt;code>\p{Han}&lt;/code> (Using Chinese to match Kanji)&lt;br>
&lt;code>\p{Hiragana}&lt;/code>&lt;br>
&lt;code>\p{Katakana}&lt;/code>&lt;/p>
&lt;p>You can also checkout my Regex Experiments:&lt;br>
&lt;a href="https://regex101.com/r/YkltWH/1">v1&lt;/a> PHP&lt;br>
&lt;a href="https://regex101.com/r/YkltWH/2">v2&lt;/a> Python3&lt;/p></description></item></channel></rss>