<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>learning on Bas-Man's Musings</title><link>https://bas-man.github.io/tags/learning/</link><description>Recent content in learning on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 27 Apr 2021 16:30:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/tags/learning/index.xml" rel="self" type="application/rss+xml"/><item><title>SPF: Adding Support for A and MX Mechanisms in Rust</title><link>https://bas-man.github.io/post/rust-spf-a-mx/</link><pubDate>Tue, 27 Apr 2021 16:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust-spf-a-mx/</guid><description>&lt;p>This is a quick followup on my progress in deconstructing SPF using Rust.&lt;br>
Today I was able to implement both &lt;code>A&lt;/code> and &lt;code>MX&lt;/code> mechanisms.&lt;/p></description></item><item><title>Looking at Regex in Rust (Addendum)</title><link>https://bas-man.github.io/post/rust-looking-at-regex-addendum/</link><pubDate>Thu, 22 Apr 2021 14:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust-looking-at-regex-addendum/</guid><description>Hi. In my previous article Looking at Regex in Rust. I covered some basics. Today I will go over some new things that I have learned, as I expanded on things that my regex expression needs to handle. In particular the need to handle the possible existence or none existence of qualifiers +,-,~,?.
TL;DR: If you don&amp;rsquo;t want to read the full article. I will place the highlights here.
A regex pattern such as (x?</description></item><item><title>Looking at Regex in Rust</title><link>https://bas-man.github.io/post/rust-looking-at-regex/</link><pubDate>Tue, 20 Apr 2021 21:58:40 +0900</pubDate><guid>https://bas-man.github.io/post/rust-looking-at-regex/</guid><description>If you have been following this series, you might know that I am playing with SPF records. I have turned my eye to a and mx mechanisms. As I started looking at the a mechanism. I noticed that my current approach using the standard string functions would probably be fairly difficult to implement. So I started to think about using the Regex crate. So this will be a look at how that went.</description></item><item><title>Rust Basic Testing</title><link>https://bas-man.github.io/post/rust-basic-testing/</link><pubDate>Mon, 19 Apr 2021 15:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust-basic-testing/</guid><description>As I work through learning rust, I figured it was time to to start doing actual testing.
Why Test Simple, it&amp;rsquo;s really essential when building anything beyond a few lines of simple code. Being able to run a series of reproducible tests as you develop; allows you to ensure that changes you make are not breaking exisiting code. You also have the option to develop using TDD.
Of course I have not adhered to any of this as I explore the basics of working with rust.</description></item><item><title>Deconstructing SPF with Rust using Generics</title><link>https://bas-man.github.io/post/deconstructing-spf-with-rust-using-generics/</link><pubDate>Sat, 10 Apr 2021 23:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/deconstructing-spf-with-rust-using-generics/</guid><description>As I mentioned in my previous article Deconstructing SPF Records with Rust. There is a case for using generics given the amount of overlap between the different mechanisms.
So in this article I will document how I transitioned from using unique structs for each mechanism, leading to less overall code and other benefits.
While I was considering how best to go about doing generics, I came across this very nice write up on dev.</description></item><item><title>Deconstructing SPF Records with Rust</title><link>https://bas-man.github.io/post/deconstructing-spf-with-rust/</link><pubDate>Thu, 08 Apr 2021 10:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/deconstructing-spf-with-rust/</guid><description>Hi. If you have visited my blog before you might have seen my series on using the trust-dns-resolver crate. As part of that series I looked at querying DNS TXT records. During the process I was reminded of SPF records. Something I used to deal with in a previous position. And this got me to thinking about using SPF records as a way to learn more about working with rust.</description></item></channel></rss>