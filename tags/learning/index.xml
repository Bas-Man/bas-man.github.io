<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>learning on Bas-Man's Musings</title><link>https://bas-man.github.io/tags/learning/</link><description>Recent content in learning on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 02 Jun 2021 18:00:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/tags/learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Swift: Deconstruct SPF</title><link>https://bas-man.github.io/post/swift/swift-spf-documenting-package/</link><pubDate>Wed, 02 Jun 2021 18:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-documenting-package/</guid><description>&lt;p>Hi,&lt;/p>
&lt;p>I have been working on this project on and off for a bit now. So I thought it was time to go over how we might be able to not only internally document our code, but also to document it at the package level.&lt;/p></description></item><item><title>Swift: Deconstruct SPF: asMechanism with Qualifier</title><link>https://bas-man.github.io/post/swift/swift-spf-asmechanism-using-qualifier/</link><pubDate>Thu, 27 May 2021 12:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-asmechanism-using-qualifier/</guid><description>&lt;p>Hi,&lt;/p>
&lt;p>In this article, I will walk through how I re-implemented the &lt;code>enum&lt;/code> for &lt;code>Qualifier&lt;/code> and &lt;code>MechanismKind&lt;/code>. I will also deliver a working &lt;code>asMechanism()&lt;/code> function. The diff is &lt;a href="https://github.com/Bas-Man/swift-decon-spf/compare/Initial-asMechanism...QualifierSuppportAsMechanism">here&lt;/a>&lt;/p></description></item><item><title>Swift: Deconstruct SPF - Qualifier and MechanismKind</title><link>https://bas-man.github.io/post/swift/swift-spf-qualifier-mechanismkind/</link><pubDate>Thu, 27 May 2021 08:50:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-qualifier-mechanismkind/</guid><description>&lt;p>In this article I will be looking at defining the &lt;strong>enums&lt;/strong> for &lt;code>Qualifier&lt;/code> and &lt;code>MechanismKind&lt;/code>. I will also be adding tests to ensure that the functions work as expected. Further I will implement a simple &lt;code>asMechanism()&lt;/code> as a proof of concept.&lt;/p></description></item><item><title>Swift: Deconstruct SPF: Strings and SubStrings</title><link>https://bas-man.github.io/post/swift/swift-spf-generic-string-function/</link><pubDate>Sat, 22 May 2021 00:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-generic-string-function/</guid><description>&lt;p>I have been working on my SPF project in &lt;strong>Swift&lt;/strong> of late. As part of this I have started to deal with &lt;strong>substrings&lt;/strong>. &amp;ldquo;&lt;em>A slice of a string&lt;/em>&amp;rdquo; according to &lt;a href="https://developer.apple.com/documentation/swift/substring">Apple Documentation&lt;/a>. In dealing with this, I have found myself quite often converting substrings back to normal strings. Today we will look at how we can pass &lt;strong>substrings&lt;/strong> directly by making our functions &lt;strong>generic&lt;/strong>.&lt;/p></description></item><item><title>Swift: Deconstruct SPF - Struct Mechanism</title><link>https://bas-man.github.io/post/swift/swift-spf-struct-mechanims/</link><pubDate>Wed, 19 May 2021 18:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/swift-spf-struct-mechanims/</guid><description>&lt;p>Today, I will start on building out the functionality of the &lt;code>struct Mechanism&lt;/code>.&lt;br>
This will involve creating some tests, and basic functions.&lt;/p></description></item><item><title>Swift: Deconstruct SPF an Outline and Background</title><link>https://bas-man.github.io/post/swift/decon-spf-outline-background/</link><pubDate>Mon, 17 May 2021 12:15:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/decon-spf-outline-background/</guid><description>&lt;h1 id="what-is-spf">What is SPF&lt;/h1>
&lt;p>If you have not followed my rust series on deconstructing SPF you can check it out &lt;a href="https://bas-man.github.io/series/learning-rust/">here&lt;/a>.&lt;/p></description></item><item><title>Swift: Deconstruct SPF Getting Started</title><link>https://bas-man.github.io/post/swift/decon-spf-getting-started/</link><pubDate>Thu, 13 May 2021 20:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/swift/decon-spf-getting-started/</guid><description>&lt;p>In my previous series &amp;ldquo;&lt;a href="https://bas-man.github.io/series/learning-rust/">Learning Rust&lt;/a>&amp;rdquo;. I decided to attempt to learn some fairly basic rust concepts and constructs by working on a fairly simple project. This seemed to go fairly well. So I am now going to attempt to work on the same project, but this time, using &lt;a href="https://swift.org">Swift&lt;/a>.&lt;/p></description></item><item><title>Rust: Move from binary to library and Add Documentation Examples that are tested.</title><link>https://bas-man.github.io/post/rust/rust-move-to-crate-add-testable-documentation/</link><pubDate>Tue, 11 May 2021 13:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-move-to-crate-add-testable-documentation/</guid><description>&lt;p>In the previous article in this &lt;a href="https://bas-man.github.io/series/learning-rust/">series&lt;/a> I went through some basics of documenting your rust code. I had hoped to be able to take advantage of another nice feature of rust. That being the fact that code examples are actually tested by rust. I will go through the changes I had to make for this to work.&lt;/p></description></item><item><title>Rust: Documenting your Code</title><link>https://bas-man.github.io/post/rust/rust-documenting/</link><pubDate>Thu, 06 May 2021 11:03:18 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-documenting/</guid><description>&lt;p>Hi.&lt;br>
As with all projects. It&amp;rsquo;s important to create documentation. This is, as we know, very important when creating code. When we come back to a project after a break, or if someone new takes over. Documentation will help you remember or learn what the code does. The thinking that was behind certain decisions.&lt;/p></description></item><item><title>SPF: Adding Support for A and MX Mechanisms in Rust</title><link>https://bas-man.github.io/post/rust/rust-spf-a-mx/</link><pubDate>Tue, 27 Apr 2021 16:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-spf-a-mx/</guid><description>&lt;p>This is a quick followup on my progress in deconstructing SPF using Rust.&lt;br>
Today I was able to implement both &lt;code>A&lt;/code> and &lt;code>MX&lt;/code> mechanisms.&lt;/p></description></item><item><title>Looking at Regex in Rust (Addendum)</title><link>https://bas-man.github.io/post/rust/rust-looking-at-regex-addendum/</link><pubDate>Thu, 22 Apr 2021 14:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-looking-at-regex-addendum/</guid><description>Hi. In my previous article Looking at Regex in Rust. I covered some basics. Today I will go over some new things that I have learned, as I expanded on things that my regex expression needs to handle. In particular the need to handle the possible existence or none existence of qualifiers +,-,~,?.
TL;DR: If you don&amp;rsquo;t want to read the full article. I will place the highlights here.
A regex pattern such as (x?</description></item><item><title>Looking at Regex in Rust</title><link>https://bas-man.github.io/post/rust/rust-looking-at-regex/</link><pubDate>Tue, 20 Apr 2021 21:58:40 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-looking-at-regex/</guid><description>If you have been following this series, you might know that I am playing with SPF records. I have turned my eye to a and mx mechanisms. As I started looking at the a mechanism. I noticed that my current approach using the standard string functions would probably be fairly difficult to implement. So I started to think about using the Regex crate. So this will be a look at how that went.</description></item><item><title>Rust Basic Testing</title><link>https://bas-man.github.io/post/rust/rust-basic-testing/</link><pubDate>Mon, 19 Apr 2021 15:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/rust-basic-testing/</guid><description>As I work through learning rust, I figured it was time to to start doing actual testing.
Why Test Simple, it&amp;rsquo;s really essential when building anything beyond a few lines of simple code. Being able to run a series of reproducible tests as you develop; allows you to ensure that changes you make are not breaking exisiting code. You also have the option to develop using TDD.
Of course I have not adhered to any of this as I explore the basics of working with rust.</description></item><item><title>Deconstructing SPF with Rust using Generics</title><link>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust-using-generics/</link><pubDate>Sat, 10 Apr 2021 23:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust-using-generics/</guid><description>As I mentioned in my previous article Deconstructing SPF Records with Rust. There is a case for using generics given the amount of overlap between the different mechanisms.
So in this article I will document how I transitioned from using unique structs for each mechanism, leading to less overall code and other benefits.
While I was considering how best to go about doing generics, I came across this very nice write up on dev.</description></item><item><title>Deconstructing SPF Records with Rust</title><link>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust/</link><pubDate>Thu, 08 Apr 2021 10:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust/deconstructing-spf-with-rust/</guid><description>Hi. If you have visited my blog before you might have seen my series on using the trust-dns-resolver crate. As part of that series I looked at querying DNS TXT records. During the process I was reminded of SPF records. Something I used to deal with in a previous position. And this got me to thinking about using SPF records as a way to learn more about working with rust.</description></item></channel></rss>