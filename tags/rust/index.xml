<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Bas-Man's Musings</title><link>https://bas-man.github.io/tags/rust/</link><description>Recent content in rust on Bas-Man's Musings</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Mon, 29 Mar 2021 11:30:00 +0900</lastBuildDate><atom:link href="https://bas-man.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>TXT lookup using the trust-dns-resolver Crate</title><link>https://bas-man.github.io/post/rust-trust-dns-resolver-txt-lookup/</link><pubDate>Mon, 29 Mar 2021 11:30:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust-trust-dns-resolver-txt-lookup/</guid><description>
&lt;p>This is the third article on using the &lt;strong>trust-dns-resolver&lt;/strong> crate&lt;br>
&lt;strong>Warning: This code is not intended to be used in production. You should review and adjust to your own needs.&lt;/strong>&lt;/p>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>First we will need to create our development environment.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>cargo new trust-dns-resolver &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="nv">$_&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will give us our standard rust directly structure. We need to add our crate to the &lt;code>Cargo.toml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>-snip-
&lt;span class="ln">2&lt;/span>&lt;span class="o">[&lt;/span>dependencies&lt;span class="o">]&lt;/span>
&lt;span class="ln">3&lt;/span>trust-dns-resolver &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0.20.1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next edit the &lt;code>src/main.rs&lt;/code> as follows.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/Bas-Man/eb35052052066903ec9ffe9eac57a55b.js">&lt;/script>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>cargo run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This outputs the following&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>TXT Record 1:
&lt;span class="ln">2&lt;/span>globalsign-smime-dv&lt;span class="o">=&lt;/span>CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8&lt;span class="o">=&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>TXT Record 2:
&lt;span class="ln">5&lt;/span>&lt;span class="nv">v&lt;/span>&lt;span class="o">=&lt;/span>spf1 &lt;span class="nv">redirect&lt;/span>&lt;span class="o">=&lt;/span>_spf.google.com
&lt;span class="ln">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="explaining-the-code">Explaining the code&lt;/h3>
&lt;p>Documentation for the TXT RData can be found &lt;a href="https://docs.rs/trust-dns-proto/0.20.1/trust_dns_proto/rr/rdata/txt/struct.TXT.html">here&lt;/a>&lt;br>
Let's take a look at what we are doing here.&lt;br>
Like the previous examples we create a resolver which will do the work of doing the DNS lookups.&lt;br>
Next we use the resolver to call &lt;code>txt_lookup()&lt;/code> and store the result into &lt;code>txt_response&lt;/code>&lt;br>
&lt;code>txt_response&lt;/code> will contain either and &lt;code>TxtLookup&lt;/code> or an &lt;code>Err&lt;/code>. For this reason we need to handle these two cases. As before I am passing a reference to the &lt;code>display_txt()&lt;/code> function.&lt;br>
Within &lt;code>display_txt&lt;/code> I use &lt;code>match&lt;/code> to handle my two cases.&lt;br>
In the case of &lt;code>Err&lt;/code>. I do nothing and just report there were no TXT records.&lt;br>
In the case of &lt;code>TxtLookup&lt;/code>, I will need to do some more processing.
I simply make an &lt;code>iter()&lt;/code> out of &lt;code>txt_response&lt;/code> and loop over it and call &lt;code>to_string()&lt;/code> on each record in the &lt;code>iter()&lt;/code>.&lt;/p>
&lt;p>I went down a rabbit hole for a while because I incorrectly thought I had to call &lt;code>txt_data()&lt;/code> which returns a &lt;code>Box&amp;lt;[u8]&lt;/code>, a smart pointer.&lt;/p>
&lt;p>I hope you find this interesting and useful.&lt;/p>
&lt;p>P.S: I might revisit this when I look at using regular expressions.&lt;/p></description></item><item><title>SOA lookup using the trust-dns-resolver Crate</title><link>https://bas-man.github.io/post/rust-trust-dns-resolver-soa-lookup/</link><pubDate>Fri, 26 Mar 2021 12:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust-trust-dns-resolver-soa-lookup/</guid><description>
&lt;p>This is a second article on using the &lt;strong>trust-dns-resolver&lt;/strong> crate&lt;br>
&lt;strong>Warning: This code is not intended to be used in production. You should review and adjust to your own needs.&lt;/strong>&lt;/p>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>First we will need to create our development environment.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>cargo new trust-dns-resolver &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="nv">$_&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will give us our standard rust directly structure. We need to add our crate to the &lt;code>Cargo.toml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>-snip-
&lt;span class="ln">2&lt;/span>&lt;span class="o">[&lt;/span>dependencies&lt;span class="o">]&lt;/span>
&lt;span class="ln">3&lt;/span>trust-dns-resolver &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0.20.1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next edit the &lt;code>src/main.rs&lt;/code> as follows.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/Bas-Man/b869526dc3bf085e7c5de14f3fa57494.js">&lt;/script>
&lt;p>Compile and run the code to make sure everything is ok.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>cargo run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This outputs the following&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>Admin: dns-admin.google.com.
&lt;span class="ln">2&lt;/span>Admin Email: dns-admin@google.com
&lt;span class="ln">3&lt;/span>Primary: ns1.google.com.
&lt;span class="ln">4&lt;/span>Serial: &lt;span class="m">364996005&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="explaining-the-code">Explaining the code&lt;/h3>
&lt;p>Documentation for the SOA RData can be found &lt;a href="https://docs.rs/trust-dns-proto/0.20.1/trust_dns_proto/rr/rdata/soa/struct.SOA.html">here&lt;/a>&lt;br>
Let's take a look at what we are doing here.&lt;br>
Like the first example we create a resolver which will do the work of doing the DNS lookups.&lt;br>
Next we use the resolver to call &lt;code>soa_lookup()&lt;/code> and store the result into &lt;code>soa_response&lt;/code>&lt;br>
&lt;code>soa_response&lt;/code> will contain either and &lt;code>SoaLookup&lt;/code> or an &lt;code>Err&lt;/code>. For this reason we need to handle these two cases. I have changed things up a little this time and I am passing a reference to the &lt;code>display_soa()&lt;/code> function. So I am allowing &lt;code>display_soa()&lt;/code> to borrow the data. In doing this I am saving on memory and I am also promising that I am not going to mutate &lt;code>soa_response&lt;/code> within this function. I will cheat a little and &lt;code>clone()&lt;/code> some data later.&lt;br>
Within &lt;code>display_soa&lt;/code> I again use &lt;code>match&lt;/code> to handle my two cases.&lt;br>
In the case of &lt;code>Err&lt;/code>. I do nothing and just report there were no records.&lt;br>
In the case of &lt;code>SoaLookup&lt;/code>, I will need to do some more processing.&lt;/p>
&lt;ul>
&lt;li>First lets make an &lt;code>iter()&lt;/code> out of &lt;code>soa_response&lt;/code> and loop over it.&lt;/li>
&lt;li>In the loop we get the &lt;code>rname()&lt;/code> or the administrative contact and the &lt;code>mname()&lt;/code> or primary name server for this domain as well as &lt;code>serial()&lt;/code> and access to a few more elements.&lt;/li>
&lt;/ul>
&lt;p>Line 26 is just a cobbled together function to redisplay &lt;code>rname()&lt;/code> as a more valid email address which is what it really represents. If anyone can point in the direction of a better way to handle this it would greatly appreciated.&lt;/p>
&lt;p>I hope you find this interesting and useful.&lt;/p></description></item><item><title>MX and Host lookup using the trust-dns-resolver Crate</title><link>https://bas-man.github.io/post/rust-trust-dns-resolver-mx-and-host-lookup/</link><pubDate>Thu, 25 Mar 2021 15:00:00 +0900</pubDate><guid>https://bas-man.github.io/post/rust-trust-dns-resolver-mx-and-host-lookup/</guid><description>
&lt;p>I used to often work with DNS in one of my previous jobs. So I have always had a long running interesting in DNS. Most recently I have been looking into &lt;a href="https://en.wikipedia.org/wiki/Rust_(programming_language)">Rust&lt;/a>. I wanted to see how easy it might be to use rust to access DNS records, one; because rust is said to be fast, and also because it's a safe programming language.&lt;/p>
&lt;p>This will be a brief write up at my attempt to use &lt;a href="https://crates.io/crates/trust-dns-resolver">trust-dns-resolver&lt;/a> to do &lt;a href="https://en.wikipedia.org/wiki/MX_record">MX&lt;/a> record lookups and subsequently host address lookups.&lt;/p>
&lt;p>&lt;strong>Warning: This code is not intended to be used in production. You should review and adjust to your own needs.&lt;/strong>&lt;/p>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>First we will need to create our development environment.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>cargo new trust-dns-resolver &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="nv">$_&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will give us our standard rust directly structure. We need to add our crate to the &lt;code>Cargo.toml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>-snip-
&lt;span class="ln">2&lt;/span>&lt;span class="o">[&lt;/span>dependencies&lt;span class="o">]&lt;/span>
&lt;span class="ln">3&lt;/span>trust-dns-resolver &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0.20.1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next edit the &lt;code>src/main.rs&lt;/code> as follows. This code was taken from the crate documentation with a couple of minor edits to get to compile.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">net&lt;/span>::&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">trust_dns_resolver&lt;/span>::&lt;span class="n">config&lt;/span>::&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">trust_dns_resolver&lt;/span>::&lt;span class="n">Resolver&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Construct a new Resolver with default configuration options
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Resolver&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ResolverConfig&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ResolverOpts&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Lookup the IP addresses associated with a name.
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lookup_ip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;www.example.com.&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// There can be many addresses associated with the name,
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// this can return IPv4 and/or IPv6 addresses
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;no addresses returned!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_ipv4&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IpAddr&lt;/span>::&lt;span class="n">V4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Ipv4Addr&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">93&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">184&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">216&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">34&lt;/span>&lt;span class="p">)));&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IpAddr&lt;/span>::&lt;span class="n">V6&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Ipv6Addr&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x2606&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mh">0x2800&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mh">0x220&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mh">0x1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mh">0x248&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mh">0x1893&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mh">0x25c8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mh">0x1946&lt;/span>&lt;span class="p">)));&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compile and run the code to make sure everything is ok. There should be no output.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>cargo run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Assuming this has worked and we got a clean build and run we can move onto digging up MX records.&lt;/p>
&lt;h2 id="changing-the-code-to-get-mx-records">Changing the code to get MX records&lt;/h2>
&lt;p>Lets replace the entire code with the following:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">trust_dns_resolver&lt;/span>::&lt;span class="n">config&lt;/span>::&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">trust_dns_resolver&lt;/span>::&lt;span class="n">Resolver&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Construct a new Resolver with default configuration options
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Resolver&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ResolverConfig&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ResolverOpts&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Lookup the IP addresses associated with a name.
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// The final dot forces this to be an FQDN, otherwise the search rules as specified
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// in `ResolverOpts` will take effect. FQDN&amp;#39;s are generally cheaper queries.
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mx_response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mx_lookup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hotmail.com.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// There can be many addresses associated with the name,
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// this can return IPv4 and/or IPv6 addresses
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//let address = response.iter().next().expect(&amp;#34;no addresses returned!&amp;#34;);
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//println!(&amp;#34;{}&amp;#34;, address);
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mx_response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No Records&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mx_response&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addresses&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mx_response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addresses&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">preference&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">host_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lookup_response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lookup_ip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host_name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">as_str&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addr_list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lookup_response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addr_list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_ipv4&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;\tip4: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;\tip6: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="explaining-the-code">Explaining the code&lt;/h3>
&lt;p>Let's take a look at what we are doing here.&lt;br>
First we create a resolver which will do the work of doing the DNS lookups.&lt;br>
Next we use the resolver to call &lt;code>mx_lookup()&lt;/code> and store the result into &lt;code>mx_response&lt;/code>&lt;br>
&lt;code>mx_response&lt;/code> will contain either and &lt;code>MXLookup&lt;/code> or an &lt;code>Err&lt;/code>. For this reason we need to handle these two cases. Here I will use &lt;code>match&lt;/code>.&lt;br>
In the case of &lt;code>Err&lt;/code>. I do nothing and just report there were no records.&lt;br>
In the case of &lt;code>MXLookup&lt;/code>, I will need to do some more processing.&lt;/p>
&lt;ul>
&lt;li>First lets make an &lt;code>iter()&lt;/code> out of &lt;code>mx_response&lt;/code> and loop over it.&lt;/li>
&lt;li>In the loop we get the &lt;code>preference()&lt;/code> or MX weight and the &lt;code>exchange()&lt;/code> or DNS record for the host.&lt;/li>
&lt;li>I am taking a short cut in the next step where I look up the ip address. I am assuming that because there is an MX host record, there will be an ip address. This could be a false assumption due to misconfiguration, so I will address that later. For now I will simply do a &lt;code>lookup_ip()&lt;/code> and trust that &lt;code>unwrap()&lt;/code> will no panic.&lt;/li>
&lt;li>Again I convert the &lt;code>lookup_response&lt;/code> to an &lt;code>iter()&lt;/code> and loop over the result.&lt;/li>
&lt;/ul>
&lt;p>The output if this code is:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln">1&lt;/span>Finished dev &lt;span class="o">[&lt;/span>unoptimized + debuginfo&lt;span class="o">]&lt;/span> target&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> in 0.28s
&lt;span class="ln">2&lt;/span> Running &lt;span class="sb">`&lt;/span>target/debug/trust-dns&lt;span class="sb">`&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="m">2&lt;/span> hotmail-com.olc.protection.outlook.com.
&lt;span class="ln">4&lt;/span>ip4: 104.47.55.33
&lt;span class="ln">5&lt;/span>ip4: 104.47.58.33
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Preference: 2&lt;br>
Exchange: hotmail-com.olc.protection.outlook.com.&lt;br>
This exchange host resolves to two ip addresses. Both of which are IPv4&lt;br>
If we change the code a little and replace &lt;code>hotmail.com&lt;/code> with &lt;code>gmail.com&lt;/code> we get:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="ln"> 1&lt;/span>&lt;span class="m">10&lt;/span> alt1.gmail-smtp-in.l.google.com.
&lt;span class="ln"> 2&lt;/span> ip4: 74.125.137.26
&lt;span class="ln"> 3&lt;/span>&lt;span class="m">5&lt;/span> gmail-smtp-in.l.google.com.
&lt;span class="ln"> 4&lt;/span> ip4: 108.177.125.27
&lt;span class="ln"> 5&lt;/span>&lt;span class="m">20&lt;/span> alt2.gmail-smtp-in.l.google.com.
&lt;span class="ln"> 6&lt;/span> ip4: 142.250.138.27
&lt;span class="ln"> 7&lt;/span>&lt;span class="m">30&lt;/span> alt3.gmail-smtp-in.l.google.com.
&lt;span class="ln"> 8&lt;/span> ip4: 173.194.199.26
&lt;span class="ln"> 9&lt;/span>&lt;span class="m">40&lt;/span> alt4.gmail-smtp-in.l.google.com.
&lt;span class="ln">10&lt;/span> ip4: 209.85.145.26
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Though I know gmail has IPv6 addresses, I am currently not getting them. I will have to see if I am missing something. I do actually expect to get them.&lt;/p>
&lt;h2 id="improving-on-the-code">Improving on the Code&lt;/h2>
&lt;p>Let's make things a little safer by remove the &lt;code>unwrap()&lt;/code> To keep things simpler, I will just provide the updated &lt;code>match&lt;/code> code here.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mx_response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No Records&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mx_response&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mx_response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">preference&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lookup_response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resolver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lookup_ip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">as_str&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lookup_response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This exchange host has no address.&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lookup_response&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ip_addrs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lookup_response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ip_addr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ip_addrs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ip_addr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_ipv4&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; ip4: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ip_addr&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; ip6: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ip_addr&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please note I have update some of the variable names and we now have nested &lt;code>match&lt;/code> statements. But the code code generates the same output as in the previous example.&lt;/p>
&lt;p>I hope you find this interesting and useful.&lt;/p></description></item></channel></rss>